#!/bin/bash

# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

RAND=$RANDOM #od -A n -t d -N 1 /dev/urandom
WRONG=0
(set -o posix; set > $RAND.set)
MY_JOB=`grep "\QUEUE_JOBNAME $QUEUE_INTERNAL_JOBNAME " config/steps.final`
MY_HOLD=`echo $MY_JOB | grep -o -- "QUEUE_HOLD"`
if [ -z "$MY_HOLD" ]
then
	return 0
fi
MY_NAME=`echo ${MY_JOB##*/} | sed 's/\.sh)//'`
PREV_NAME=(`echo $MY_JOB | sed 's/^.*QUEUE_HOLD\([^ ]*\) .*$/\1/;s/QUEUE_SEP/ /g;s/${//g;s/[%\.\*]*}//g'`)
declare -A PREV_JOB
for i in "${PREV_NAME[@]}"; do PREV_JOB[$i]="`grep "^$i=" config/steps.final`" ; done
for i in "${PREV_NAME[@]}"
do
	step=$(echo ${PREV_JOB[$i]} | grep -o " QUEUE_JOBNAME $DELTAMP_VER\.[^\.]*\.$SUBPROJECT" | cut -d "." -f 2)
	if [ ! -z "${PREV_JOB[$i]}" ]
	then
		if [[ ${PREV_JOB[$i]} == *" QUEUE_ARRAYS 1-"* ]]
		then
			TEST1=`for j in log/$step.[0-9]*.out; do if [ ! -z "$(grep "^\[ERROR\]" $j)" ] ; then echo $j | cut -d "." -f 2 ; fi ; done | sort -n | tr "\n" "," | sed 's/,$/\n/'`
			TEST2=`for j in log/$step.[0-9]*.out; do if [ -z "$(tail -1 $j | grep "END")" ] ; then echo $j | cut -d "." -f 2 ; fi ; done | sort -n | tr "\n" "," | sed 's/,$/\n/'`
			if [ ! -z $TEST1 ]
			then
				echo "MOTHUR issued an ERROR in the previous step $i for the task(s) $TEST1."
				echo "Check log at $EXEC/log/$step.xx.out and job report with job name $DELTAMP_VER.$step.$SUBPROJECT and TASK_ID $TEST1."
				echo ""
				WRONG=1
			elif [ ! -z $TEST2 ]
			then
				echo "The task(s) $TEST2 of the previous step $i did not terminate correctly."
				echo "Check log at $EXEC/log/$step.xx.out and job report with job name $DELTAMP_VER.$step.$SUBPROJECT and TASK_ID $TEST2."
				echo ""
				WRONG=1
			fi
		else
			if [ ! -z "$(grep "\[ERROR\]" log/$step.out)" ]
			then
				echo "MOTHUR issued an ERROR in the previous step $i."
				echo "Check log at $EXEC/log/$step.out and job report with job name $DELTAMP_VER.$step.$SUBPROJECT ."
				echo ""
				WRONG=1
			elif [ -z $(tail -1 log/$step.out | grep "END") ]
			then
				echo "The previous step $i did not terminate correctly."
				echo "Check log at $EXEC/log/$step.out and job report with job name $DELTAMP_VER.$step.$SUBPROJECT ."
				echo ""
				WRONG=1
			fi
		fi
	fi
done
if [ $WRONG -eq 1 ]
then
	echo "additional environment"
	comm -23 <(set -o posix; set | sort) <(sort $RAND.set) | grep -v "^i=\|^j=\|^WRONG="
	rm $RAND.set
	exit 100
else
	echo "Previous job(s) $(echo ${PREV_JOB[@]} | grep -o " QUEUE_JOBNAME $DELTAMP_VER\.[^\.]*\.$SUBPROJECT" | sed '$!N;s/ QUEUE_JOBNAME //g;s/\n/ and /g') terminated correctly."
	rm $RAND.set
fi
