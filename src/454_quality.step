# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# Raw sequences group file
while read NAME LIB
do
	awk -v N=$NAME '$0~"^>"{print $1"\t"N}' libraries/fasta/$LIB.fasta | sed 's/>//'
done < config/lib3.list > processing/$SUBPROJECT.raw.groups

# Demultiplex check
if [ $DEMULTI == "no" ]
then
	LIB_ALL=(`cat config/lib2.list`)
	cd libraries/demultiplex
	. $BIN/check_${TECH}_barcodes.sh ${LIB_ALL[@]%.*} > $EXEC/archives/$SUBPROJECT.outputs/demultiplexing_check.csv
	cd $EXEC
fi

# Quality check for each sample in each library
cd quality_check
if [ $CLIPPING == "both" ]
then
	paste <(echo -e "Sample\tLibrary\tRaw") <(seq $MINQUAL 30 | sed 's/\(.*\)/Trimmed at \1 Phred score/' | tr "\n" "\t" | sed 's/$/\n/') > header
else
	for i in $(seq $MINLEN 5 $MAXLEN)
	do
		for j in $(seq $MINQUAL 30)
		do
			echo "$i.$j"
		done
	done | tr "\n" "\t" | paste <(echo -e "Sample\tLibrary\tRaw") - > header
fi

while read NAME LIB
do
	paste <(echo -e "$NAME\t$LIB") <(nbseq.py ../libraries/fasta/$LIB.fasta) <(tr "\n" "\t" < $LIB.stat | sed 's/$/\n/')
done  < $EXEC/config/lib3.list | cat header - > $SUBPROJECT.lib_counts.tsv

# For each sample over all libraries
sed '1d' $SUBPROJECT.lib_counts.tsv | sort -k 1,1 | awk '{if(NR==1){for(i=3;i<=NF;i++){sum[i]=$i};prev=$1;printf "%s", prev} else if($1==prev){for(i=3;i<=NF;i++){sum[i]+=$i}} else {for(i=3;i<=NF;i++){printf "\t%s", sum[i];sum[i]=$i};prev=$1;printf "\n%s", prev}} END {for(i=3;i<=NF;i++){printf "\t%s", sum[i]} ; printf "\n"}' | mimato | cat <(sed 's/Library\t//' header) - > $SUBPROJECT.quality.stat.txt
rm header

# Signal and stop if two few sequences
if [ $MIN_DEPTH -gt 1 ]
then
	head -n -4 $SUBPROJECT.quality.stat.txt | awk -v M=$MIN_DEPTH '$2<M{print $1,$2}' > min_depth.raw.test
	head -n -4 $SUBPROJECT.quality.stat.txt | awk -v M=$MIN_DEPTH '$3<M{print $1,$3}' > min_depth.trim.test
	TEST=(raw trim)
else
	head -n -4 $SUBPROJECT.quality.stat.txt | awk -v M=$MIN_DEPTH '$3<$2*M{print $1,$3}' > min_depth.trim.test
	TEST=(trim)
fi

for i in ${TEST[@]}
do
	if [ -s min_depth.$i.test ]
	then
		echo "The following samples do not have the requested minimum amount of $i sequences fixed at $MIN_DEPTH :"
		echo "Sample Reads"
		cat min_depth.$i.test
		echo ""
		echo "Aborting"
		awk 'BEGIN{FS=OFS="\t"};{print $1,$2,$3}' $SUBPROJECT.quality.stat.txt > $SUBPROJECT.summary.stat.tsv
		ln -s $PWD/$SUBPROJECT.summary.stat.tsv $EXEC/archives/$SUBPROJECT.outputs/$SUBPROJECT.read_counts.tsv
		. $BIN/list_step_files.sh
		exit 100
	else
		echo "All samples have at least $MIN_DEPTH $i reads"
	fi
done

# Select best trimming criteria (at least $MIN_DEPTH and 75 % of $MINLEN.$MINQUAL for each sample, or $MIN_DEPTH * raw counts if MIN_DEPTH is a ratio)
echo "$MINLEN.$MINQUAL" > trimming.parameters.txt
if [ $MIN_DEPTH -gt 1 ]
then
	cut -f 3 $SUBPROJECT.quality.stat.txt | head -n -4 | transpose_tab > ref.tmp
	if [ $CLIPPING == "both" ]
	then
		head -n -4 $SUBPROJECT.quality.stat.txt | transpose_tab | sed '1,2d;/^[ \t]*$/d' | tac | cat ref.tmp - | awk -v M=$MIN_DEPTH 'BEGIN{FS="\t"} {if(NR==1){for(i=2;i<=NF;i++){ref[i]=$i};next} ; for(i=2;i<=NF;i++){if($i<M || $i<ref[i]*0.75){next}};print $1;exit}' | sed "s/Trimmed at /$MINLEN\./;s/ Phred score//" > trimming.parameters.txt
		QUAL=`cut -d "." -f 2 trimming.parameters.txt`
		cut -f 1-2,$(($QUAL - $MINQUAL + 3)) $SUBPROJECT.quality.stat.txt > $SUBPROJECT.summary.stat.tsv
	else
		head -n -4 $SUBPROJECT.quality.stat.txt | transpose | grep -v "Raw\|Denoise" | awk '{split($1,a,".");print a[1]*a[2],$0}' | sort -k 1,1nr -k 2,2n | cat ref.tmp - | awk -v M=$MIN_DEPTH '{if(NR==1){for(i=2;i<=NF;i++){ref[i]=$i}} else {i=3; while($i>M && ($i/ref[i])>0.75) {i++ ; if(i==NF){print $2; exit}}}}' > trimming.parameters.txt
		TRIM=`cat trimming.parameters.txt`
		awk -v T=$TRIM 'BEGIN{R=3;OFS="\t"} {if(NR==1){printf "%s\t%s" ,$1,$2; for (i=3;i<=NF;i++){if($i==T) {printf "\t%s %s\n", "Trimmed at",$i; R=i}}} else print $1,$2,$R}' $SUBPROJECT.quality.stat.txt > $SUBPROJECT.summary.stat.tsv
	fi
else
	cut -f 3 $SUBPROJECT.quality.stat.txt | head -n -4 | transpose_tab > ref.tmp
	if [ $CLIPPING == "both" ]
	then
		head -n -4 $SUBPROJECT.quality.stat.txt | transpose_tab | sed '1,2d;/^[ \t]*$/d' | tac | cat ref.tmp - | awk -v M=$MIN_DEPTH 'BEGIN{FS="\t"} {if(NR==1){for(i=2;i<=NF;i++){ref[i]=$i};next} ; for(i=2;i<=NF;i++){if($i<ref[i]*M){next}};print $1;exit}' | sed "s/Trimmed at /$MINLEN\./;s/ Phred score//" > trimming.parameters.txt
		QUAL=`cut -d "." -f 2 trimming.parameters.txt`
		cut -f 1-2,$(($QUAL - $MINQUAL + 3)) $SUBPROJECT.quality.stat.txt > $SUBPROJECT.summary.stat.tsv
	else
		head -n -4 $SUBPROJECT.quality.stat.txt | transpose | grep -v "Raw\|Denoise" | awk '{split($1,a,".");print a[1]*a[2],$0}' | sort -k 1,1nr -k 2,2n | cat ref.tmp - | awk -v M=$MIN_DEPTH '{if(NR==1){for(i=2;i<=NF;i++){ref[i]=$i}} else {i=3; while($i>ref[i]*M) {i++ ; if(i==NF){print $2; exit}}}}' > trimming.parameters.txt
		TRIM=`cat trimming.parameters.txt`
		awk -v T=$TRIM 'BEGIN{R=3;OFS="\t"} {if(NR==1){printf "%s\t%s" ,$1,$2; for (i=3;i<=NF;i++){if($i==T) {printf "\t%s %s\n", "Trimmed at",$i; R=i}}} else print $1,$2,$R}' $SUBPROJECT.quality.stat.txt > $SUBPROJECT.summary.stat.tsv
	fi
fi
rm ref.tmp
ln -s $PWD/$SUBPROJECT.summary.stat.tsv $EXEC/archives/$SUBPROJECT.outputs/$SUBPROJECT.read_counts.tsv

# raw reads statistics
cd $EXEC/libraries/raw_stat
if [[ $LIB_DIR == "/"* ]]
then
	for LIB_NAME in $(sed 's/\.sff.*//' $EXEC/config/lib2.list)
	do
		# cat length and quality statistics of all samples from a library
		for j in length meanqual meanposqual
		do
			for i in $(ls *$LIB_NAME.$j)
			do
				cat <(echo $i | cut -d "." -f 1) $i | tr "\n" "\t" | sed 's/$/\n/'
			done > $LIB_NAME.$j.tmp && mv $LIB_NAME.$j.tmp $LIB_NAME.$j
		done
		# Figures
		Rscript --vanilla $BIN/Rscript_raw_stat_figures.R $SUBPROJECT $LIB_NAME $BIN
	done
	# merge all figures
	gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=$EXEC/archives/$SUBPROJECT.outputs/$SUBPROJECT.raw_reads_statistics.pdf $(ls $SUBPROJECT.*.pdf)
	rm $SUBPROJECT.*.pdf
fi

# list files and directories
(. $BIN/list_step_files.sh)

echo END
