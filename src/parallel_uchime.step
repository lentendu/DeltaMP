#!/bin/bash

# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

## two step parallelization of UCHIME with self reference ##
start=`date +%s`
mkdir temp_uchime && cd temp_uchime

# serial chimera removal for reads with abundance above 16
vsearch --fastx_getseqs ../$COUNT.fasta --labels <(awk -F'\t' 'NR>1 && $2>16{print $1,$2}' ../$COUNT.count_table | sort -k 2,2nr | cut -f 1 -d " ") --fastaout - | vsearch --quiet --uchime_denovo - --nonchimeras $FASTA.ab.ok.fasta --chimeras $FASTA.ab.chim.fasta --qmask none

# parallel check for decreasing abundance intervals (2^4, 2^3, 2^2, 2^1 and 2^0)
while read i j
do
	# merge all non-chimeric OTUs so far
	cat $FASTA.*.ok.fasta > $FASTA.ref${j}.fasta
	# chimera detection against more abundant
	vsearch --fastx_getseqs ../$COUNT.fasta --labels <(awk -F'\t' -v I=$i -v J=$j 'NR>1 && $2>I && $2<=J{print $1,$2}' ../$COUNT.count_table | sort -k 2,2nr | cut -f 1 -d " ") --fastaout - | vsearch --quiet --threads $NCPUS --uchime_ref - --db $FASTA.ref${j}.fasta --nonchimeras $FASTA.low${j}.ok.fasta --chimeras $FASTA.low${j}.chim.fasta --qmask none
done < <(seq 4 -1 0 | awk '{print 2^($1-1),2^$1}')

# merge non chimeric and chimeric sequences
cat $FASTA.ab.ok.fasta $FASTA.low*.ok.fasta | twofasta > ../$FASTA.ok.fasta
cat $FASTA.ab.chim.fasta $FASTA.low*.chim.fasta | twofasta > ../$FASTA.chim.fasta
NBCHIM=$(grep -c "^>" ../$FASTA.chim.fasta)
end=`date +%s`
if [ $NBCHIM -gt 0 ]
then
	echo "# The parrallel self reference UCHIME implementation took $((${end}-${start})) secondes to complete and detected a total of $NBCHIM chimeras in the file $FASTA.fasta."
else
	echo "# The parrallel self reference UCHIME implementation took $((${end}-${start})) secondes to complete and did not detected any chimera in the file $FASTA.fasta."
fi
cd .. && rm -r temp_uchime
