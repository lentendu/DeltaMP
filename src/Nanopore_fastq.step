# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# Library to analyse
read SAMP_NAME LIB_NAME <<<`sed -n ${ARRAY_TASK}'p' config/lib3.list`
if [ ! -z "$(grep $SAMP_NAME config/*.missing 2> /dev/null)" ]
then
	echo -e "The sample $SAMP_NAME had no read at the end of the step $(grep -H $SAMP_NAME config/*.missing | sed 's@.*/@@;s@\.missing.*@@').\nSkip"
	(. $BIN/list_step_files.sh)
	echo END
	exit 0
fi
RAWPATH=""

cd libraries

# Primer clipping
FWD_RC=$(echo -e ">fwd\n$FWD" | seqkit seq -vrp -t dna | tail -1)
RVS_RC=$(echo -e ">rvs\n$RVS" | seqkit seq -vrp -t dna | tail -1)

if [ $PRIMALG == "cutadapt" ]
then
	# cutadapt: extract part of reads containing the biological amplified sequences
	FDIFFS=$(awk -v P=$PDIFFS -v F=${#FWD} 'BEGIN{print (int(P/F*100)+1)/100}')
	RDIFFS=$(awk -v P=$PDIFFS -v R=${#RVS} 'BEGIN{print (int(P/R*100)+1)/100}')
	FO=$(echo "${#FWD} * $OLEN" | bc -l | sed 's/\..*//')
	RO=$(echo "${#RVS} * $OLEN" | bc -l | sed 's/\..*//')
	eval $DECOMP ${RAWPATH}${LIB_NAME}/*.fastq.$EXT | seqkit seq -i | cutadapt -j $NCPUS -m $MINLEN -M $MAXLEN -g "$FWD;e=$FDIFFS;o=$FO...$RVS_RC;e=$RDIFFS;o=$RO" --trimmed-only -o - - 2> fastq/log.cutadapt.${LIB_NAME}.fr.txt | eval $COMP > fastq/${FWD_NAME}.${LIB_NAME}.fastq.$EXT
	eval $DECOMP ${RAWPATH}${LIB_NAME}/*.fastq.$EXT | seqkit seq -i | cutadapt -j $NCPUS -m $MINLEN -M $MAXLEN -g "$RVS;e=$RDIFFS;o=$RO...$FWD_RC;e=$FDIFFS;o=$FO" --trimmed-only -o - - 2> fastq/log.cutadapt.${LIB_NAME}.rf.txt | eval $COMP > fastq/${RVS_NAME}.${LIB_NAME}.fastq.$EXT
elif [ $PRIMALG == "hmmer" ]
then
	# Alternative HMMER match
	# strict match of high quality expected sequence(s) in forward direction only, clustered and aligned for hmm profil
	eval $DECOMP ${RAWPATH}${LIB_NAME}/*.fastq.$EXT | seqkit seq -i | cutadapt -j $NCPUS -m $MINLEN -M $MAXLEN -g "$FWD;o=${#FWD}...$RVS_RC;o=${#RVS}" -e 0 --trimmed-only -o - - 2> fastq/log.cutadapt.${LIB_NAME}.fr.txt > fastq/ref.${LIB_NAME}.fastq
	# cluster high quality sequence and create hmmer profiles
	seqkit fq2fa fastq/ref.${LIB_NAME}.fastq| vsearch --quiet --derep_prefix - --sizeout --output - | vsearch --quiet --cluster_smallmem - --threads $NCPUS --usersort --id 0.9 --iddef 1 --centroids - | mafft --thread $NCPUS --quiet - | seqkit seq -w0 -u | hmmbuild --cpu $NCPUS --informat afa -n fwd -o fastq/log.${LIB_NAME}.hmm fastq/fwd.${LIB_NAME}.hmm -
	# nhmmer to detect forward or reverse sequences
	eval $DECOMP ${RAWPATH}${LIB_NAME}/*.fastq.$EXT | seqkit fq2fa --quiet | seqkit seq -g -i -m $MINLEN | nhmmer --cpu $NCPUS -E 1e-6 --w_length $MAXLEN -o /dev/null --tblout fastq/fwd.${LIB_NAME}.tbl fastq/fwd.${LIB_NAME}.hmm -
	# extact matching region with bed format
	eval $DECOMP ${RAWPATH}${LIB_NAME}/*.fastq.$EXT | seqkit seq -i | seqkit subseq -j $NCPUS --quiet --bed <(awk -v l=$MINLEN -v L=$MAXLEN '$1!~"^#" && $12=="+"{d=$8-$7; if(d>=l && d<=L){print $1"\t"$7"\t"$8}}' fastq/fwd.${LIB_NAME}.tbl) | sed '1~4s/:[\.-] *$//' | eval $COMP > fastq/${FWD_NAME}.${LIB_NAME}.fastq.$EXT
	eval $DECOMP ${RAWPATH}${LIB_NAME}/*.fastq.$EXT | seqkit seq -i | seqkit subseq -j $NCPUS --quiet --bed <(awk -v l=$MINLEN -v L=$MAXLEN '$1!~"^#" && $12=="-"{d=$7-$8; if(d>=l && d<=L){print $1"\t"$8"\t"$7}}' fastq/fwd.${LIB_NAME}.tbl) | sed '1~4s/:[\.-] *$//' | eval $COMP > fastq/${RVS_NAME}.${LIB_NAME}.fastq.$EXT
	# clean
	rm fastq/ref.${LIB_NAME}.fastq fastq/fwd.${LIB_NAME}.tbl fastq/fwd.${LIB_NAME}.hmm
fi

# check for no read
if [ -z "$(i=fastq/${FWD_NAME}.${LIB_NAME}.fastq.$EXT ; if [ -f $i ]; then eval $DECOMP $i | head -c1 ; fi)" ] && [ -z "$(i=fastq/${RVS_NAME}.${LIB_NAME}.fastq.$EXT ; if [ -f $i ]; then eval $DECOMP $i | head -c1 ; fi)" ]
then
	MY_TMP_NAME=`echo $JOBNAME | sed "s/$DELTAMP_VER\.//;s/\.$SUBPROJECT//"`
	echo $SAMP_NAME > ${MY_TMP_NAME}.${SAMP_NAME}.missing
else
	# else do some basic stats (length of each read, average quality by position --> might not be necessry as variable length)
	RAWCOUNT=$(eval $DECOMP ${RAWPATH}${LIB_NAME}/*.fastq.$EXT | seqkit stat -T | sed '1d' | cut -f 4)
	for j in ${FWD_NAME} ${RVS_NAME}
	do
		if [ $j == "$FWD_NAME" ] ; then l=${RVS_NAME} ; else l=${FWD_NAME} ; fi
		LIB_COUNT=$(seqkit stat -T fastq/$j.${LIB_NAME}.fastq.$EXT 2> /dev/null | sed '1d' | cut -f 4)
		# removal of empty files
		if [ "${LIB_COUNT:-0}" -eq 0 ]
		then
			echo "There is no reads in the orientation $j.${LIB_NAME}"
			rm -f fastq/$j.${LIB_NAME}.fastq.$EXT
			continue
		fi
		seqkit fx2tab -ql fastq/$j.${LIB_NAME}.fastq.gz | cut -f 4-5 | awk '{print $1,int($2)}' | sort | uniq -c | sed 's/^ *//' > raw_stat/$j.${LIB_NAME}.ql
	done
fi

# list files and directories
(. $BIN/list_step_files.sh)

echo END

