# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# Library to analyse
read SAMP_NAME FWD_LIB RVS_LIB <<<`sed -n ${ARRAY_TASK}'p' config/lib3.list`
if [ ! -z "$(grep $SAMP_NAME config/*.missing 2> /dev/null)" ]
then
	echo -e "The sample $SAMP_NAME had no read at the end of the step $(grep -H $SAMP_NAME config/*.missing | sed 's@.*/@@;s@\.missing.*@@').\nSkip"
	(. $BIN/list_step_files.sh)
	echo END
	exit 0
fi
LIB_NAME=$(echo $FWD_LIB $RVS_LIB | sed 's/\(.*\)[^ ]* \1.*$/\1/')
if [ $DEMULTI == "no" ]; then RAWPATH="fastq/" ; fi
if [ $TRUNCLEN != "no" ]; then MINCUT=$TRUNCLEN ; else MINCUT=20 ; fi
cd libraries

# Primer clipping
if [ $CLIPPING != "no" ]
then
	FWD_RC=$(echo -e ">fwd\n$FWD" | seqkit seq -vrp -t dna | tail -1)
	RVS_RC=$(echo -e ">rvs\n$RVS" | seqkit seq -vrp -t dna | tail -1)
	FDIFFS=$(awk -v P=$PDIFFS -v F=${#FWD} 'BEGIN{print (int(P/F*100)+1)/100}')
	RDIFFS=$(awk -v P=$PDIFFS -v R=${#RVS} 'BEGIN{print (int(P/R*100)+1)/100}')
	if [ $PRIM_ANCH == "yes" ] ; then PANCH="X" ; else PANCH="" ; fi
	# cutadapt
	if [ $CLIPPING == "both" ]
	then
		cutadapt -m $MINCUT -a "$PANCH$FWD;e=$FDIFFS;o=$((${#FWD}-2))...$RVS_RC;e=$RDIFFS;o=8" -A "$PANCH$RVS;e=$RDIFFS;o=$((${#RVS}-2))...$FWD_RC;e=$FDIFFS;o=8" --no-indels --untrimmed-output=fastq/${FWD_LIB}.unt.fastq.$EXT --untrimmed-paired-output=fastq/${RVS_LIB}.unt.fastq.$EXT -o fastq/${FWD_NAME}.${FWD_LIB}.fastq.$EXT -p fastq/${RVS_NAME}.${RVS_LIB}.fastq.$EXT ${RAWPATH}${FWD_LIB}.fastq.$EXT ${RAWPATH}${RVS_LIB}.fastq.$EXT > fastq/log.cutadapt.${LIB_NAME}.fr.txt
		if [ -s fastq/${FWD_LIB}.unt.fastq.$EXT ]
		then
			cutadapt -m $MINCUT -a "$PANCH$RVS;e=$RDIFFS;o=$((${#RVS}-2))...$FWD_RC;e=$FDIFFS;o=8" -A "$PANCH$FWD;e=$FDIFFS;o=$((${#FWD}-2))...$RVS_RC;e=$RDIFFS;o=8" --no-indels --trimmed-only -o fastq/${RVS_NAME}.${FWD_LIB}.fastq.$EXT -p fastq/${FWD_NAME}.${RVS_LIB}.fastq.$EXT fastq/${FWD_LIB}.unt.fastq.$EXT fastq/${RVS_LIB}.unt.fastq.$EXT > fastq/log.cutadapt.${LIB_NAME}.rf.txt
		fi
	elif [ $CLIPPING == "5prime" ]
	then
		cutadapt -m $MINCUT -g "$PANCH$FWD;e=$FDIFFS" -G "$PANCH$RVS;e=$RDIFFS" --no-indels --untrimmed-output=fastq/${FWD_LIB}.unt.fastq.$EXT --untrimmed-paired-output=fastq/${RVS_LIB}.unt.fastq.$EXT -o fastq/${FWD_NAME}.${FWD_LIB}.fastq.$EXT -p fastq/${RVS_NAME}.${RVS_LIB}.fastq.$EXT ${RAWPATH}${FWD_LIB}.fastq.$EXT ${RAWPATH}${RVS_LIB}.fastq.$EXT > fastq/log.cutadapt.${LIB_NAME}.fr.txt
		if [ -s fastq/${FWD_LIB}.unt.fastq.$EXT ]
		then
			cutadapt -m $MINCUT -g "$PANCH$RVS;e=$RDIFFS" -G "$PANCH$FWD;e=$FDIFFS" --no-indels --trimmed-only -o fastq/${RVS_NAME}.${FWD_LIB}.fastq.$EXT -p fastq/${FWD_NAME}.${RVS_LIB}.fastq.$EXT fastq/${FWD_LIB}.unt.fastq.$EXT fastq/${RVS_LIB}.unt.fastq.$EXT > fastq/log.cutadapt.${LIB_NAME}.rf.txt
		fi
	elif [ $CLIPPING == "3prime" ]
	then
		cutadapt -m $MINCUT -a "$RVS_RC;e=$RDIFFS" -A "$FWD_RC;e=$FDIFFS" --no-indels --untrimmed-output=fastq/${FWD_LIB}.unt.fastq.$EXT --untrimmed-paired-output=fastq/${RVS_LIB}.unt.fastq.$EXT -o fastq/${FWD_NAME}.${FWD_LIB}.fastq.$EXT -p fastq/${RVS_NAME}.${RVS_LIB}.fastq.$EXT ${RAWPATH}${FWD_LIB}.fastq.$EXT ${RAWPATH}${RVS_LIB}.fastq.$EXT > fastq/log.cutadapt.${LIB_NAME}.fr.txt
		if [ -s fastq/${FWD_LIB}.unt.fastq.$EXT ]
		then
			cutadapt -m $MINCUT -a "$FWD_RC;e=$FDIFFS" -A "$RVS_RC;e=$RDIFFS" --no-indels --trimmed-only -o fastq/${RVS_NAME}.${FWD_LIB}.fastq.$EXT -p fastq/${FWD_NAME}.${RVS_LIB}.fastq.$EXT fastq/${FWD_LIB}.unt.fastq.$EXT fastq/${RVS_LIB}.unt.fastq.$EXT > fastq/log.cutadapt.${LIB_NAME}.rf.txt
		fi
	fi
	rm -f fastq/${FWD_LIB}.unt.fastq.$EXT fastq/${RVS_LIB}.unt.fastq.$EXT
	# primer logo
	# weblogo -c classic -s large -t "${LIB_NAME}: $FWD_NAME" < <(awk -v a=${#FWD} 'BEGIN{FS="\t"} NF==11{printf ">%s\n%*s\n",$1,a,$6}' raw_stat/${FWD_LIB}.cutadapt | sed 's/ /N/g' )> raw_stat/weblogo.${LIB_NAME}.forward.eps
	# weblogo -c classic -s large -t "${LIB_NAME}: primer $RVS_NAME" < <(awk -v a=${#RVS} 'BEGIN{FS="\t"} NF==11{printf ">%s\n%*s\n",$1,a,$6}' raw_stat/${RVS_LIB}.cutadapt | sed 's/ /N/g') > raw_stat/weblogo.${LIB_NAME}.reverse.eps
else
	ln -s $PWD/${FWD_LIB}.fastq.$EXT $PWD/fastq/${FWD_NAME}.${FWD_LIB}.fastq.$EXT
	ln -s $PWD/${RVS_LIB}.fastq.$EXT $PWD/fastq/${RVS_NAME}.${RVS_LIB}.fastq.$EXT
fi

# check for no read
if [ -z "$(i=fastq/${FWD_NAME}.${FWD_LIB}.fastq.$EXT ; if [ -f $i ]; then eval $DECOMP $i | head -c1 ; fi)" ] && [ -z "$(i=fastq/${RVS_NAME}.${FWD_LIB}.fastq.$EXT ; if [ -f $i ]; then eval $DECOMP $i | head -c1 ; fi)" ]
then
	MY_TMP_NAME=`echo $JOBNAME | sed "s/$DELTAMP_VER\.//;s/\.$SUBPROJECT//"`
	echo $SAMP_NAME > ${MY_TMP_NAME}.${SAMP_NAME}.missing
else
	RAWCOUNT=$(seqkit stat -T ${RAWPATH}${FWD_LIB}.fastq.$EXT | sed '1d' | cut -f 4)
	for j in ${FWD_NAME} ${RVS_NAME}
	do
		if [ $j == "$FWD_NAME" ] ; then l=${RVS_NAME} ; else l=${FWD_NAME} ; fi
		for i in ${FWD_LIB} ${RVS_LIB}
		do
			LIB_COUNT=$(seqkit stat -T fastq/$j.$i.fastq.$EXT 2> /dev/null | sed '1d' | cut -f 4)
			# removal of empty files
			if [ "${LIB_COUNT:-0}" -eq 0 ]
			then
				if [ $i == ${FWD_LIB} ]; then echo "There is no reads in the orientation $j.$i / $l.${RVS_LIB}." ; fi
				rm -f fastq/$j.$i.fastq.$EXT
				continue
			# removal of files with too low percent of raw reads in one orientation
			elif (( $(echo "$LIB_COUNT < ( $RAWCOUNT * $OTRESH / 100 )" | bc -l) ))
			then
				if [ $i == ${FWD_LIB} ]; then echo "There is only $LIB_COUNT reads in the orientation $j.$i / $l.${RVS_LIB} , for $RAWCOUNT raw reads, which is below the Orientation threshold of $OTRESH %. Reads in this direction are ignored." ; fi
				rm fastq/$j.$i.fastq.$EXT
				continue
			fi
			if [ $i == ${FWD_LIB} ]; then k=$LIB_NAME.fwd ; else k=$LIB_NAME.rvs ; fi
			vsearch --quiet --fastq_stats fastq/$j.$i.fastq.$EXT --log fastq/$j.$k.stats
			sed -n '/^Read length distribution/,/^$/{s/>=//;p}' fastq/$j.$k.stats | awk '$3~"%"{print $1,$2}' | sort -k1,1n > raw_stat/$j.$k.length
			sed -n '/^Q score distribution/,/^$/p' fastq/$j.$k.stats | awk '$5~"%"{print $2,$4}' | sort -k 1,1 | join -a 1 -o 0,2.2 -e "0" <(seq 0 41 | sort -k 1,1) - | sort -k 1,1n | cut -d " " -f 2 > raw_stat/$j.$k.meanqual
			sed -n '/RatePct/,/^$/p' fastq/$j.$k.stats | sed '1,2d;$d' | awk '{print $3}' > raw_stat/$j.$k.meanposqual
			rm fastq/$j.$k.stats
		done
	done
	
	# Filter reads with minimum truncation values before pair-end
	if [ $TRUNCBE == "yes" ]
	then
		if [ $TRUNCLEN != "no" ]
		then
			MINKEEP=" --fastq_minlen $TRUNCLEN"
		fi
		if [ $MAXTRUNCLEN != "no" ]
		then
			MAXKEEP=" --fastq_trunclen_keep $MAXTRUNCLEN"
		fi
		# Process both direction separately
		for i in ${FWD_NAME} ${RVS_NAME}
		do
			if [ $i == "$FWD_NAME" ] ; then j=${RVS_NAME} ; else j=${FWD_NAME} ; fi
			if [ -f fastq/$i.${FWD_LIB}.fastq.$EXT ]
			then
				vsearch --fastq_filter fastq/$i.${FWD_LIB}.fastq.$EXT --reverse fastq/$j.${RVS_LIB}.fastq.$EXT --fastq_truncee $MAXEE$MINKEEP$MAXKEEP --fastqout fastq/$i.${FWD_LIB}.trunc.fastq --fastqout_rev fastq/$j.${RVS_LIB}.trunc.fastq
				# remove empty files then compress
				if [ ! -s fastq/$i.${FWD_LIB}.trunc.fastq ]
				then
					rm fastq/$i.${FWD_LIB}.trunc.fastq fastq/$j.${RVS_LIB}.trunc.fastq
				else
					eval $COMP fastq/$i.${FWD_LIB}.trunc.fastq fastq/$j.${RVS_LIB}.trunc.fastq
				fi
			fi
		done
		# check for no read
		if [ -z "$(eval $DECOMP fastq/${FWD_NAME}.${FWD_LIB}.trunc.fastq.$EXT | head -c 1)" ] && [ -z "$(eval $DECOMP fastq/${RVS_NAME}.${FWD_LIB}.trunc.fastq.$EXT | head -c 1)" ]
		then
			MY_TMP_NAME=`echo $JOBNAME | sed "s/$DELTAMP_VER\.//;s/\.$SUBPROJECT//"`
			echo $SAMP_NAME >> $EXEC/config/${MY_TMP_NAME}.missing
		fi
	fi
fi

# list files and directories
(. $BIN/list_step_files.sh)

echo END



