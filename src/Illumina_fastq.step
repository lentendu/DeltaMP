# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# Library to analyse
read SAMP_NAME FWD_LIB RVS_LIB <<<`sed -n ${ARRAY_TASK}'p' config/lib3.list`
LIB_NAME=$(echo $FWD_LIB $RVS_LIB | sed 's/\(.*\)[^ ]* \1.*$/\1/')
if [ $DEMULTI == "no" ]; then RAWPATH="fastq/" ; fi
cd libraries

# Primer clipping
if [ $CLIPPING != "no" ]
then
	FWD_RC=$(echo -e ">fwd\n$FWD" | obicomplement --without-progress-bar --uppercase | tail -1)
	RVS_RC=$(echo -e ">rvs\n$RVS" | obicomplement --without-progress-bar --uppercase | tail -1)
	DISS=`awk -v F=${#FWD} -v R=${#RVS} -v D=$PDIFFS 'BEGIN{DISS=D/F;if(D/R>DISS){DISS=D/R};printf "%.2g\n", DISS}'`
	# cutadapt
	if [ $CLIPPING == "both" ]
	then
		cutadapt -a $FWD...$RVS_RC -A $RVS...$FWD_RC -e $DISS --no-indels --untrimmed-output=fastq/${FWD_LIB}.fwd_unt.fastq --untrimmed-paired-output=fastq/${RVS_LIB}.fwd_unt.fastq -o fastq/${FWD_LIB}.fwd.fastq -p fastq/${RVS_LIB}.fwd.fastq ${RAWPATH}${FWD_LIB}.fastq.bz2 ${RAWPATH}${RVS_LIB}.fastq.bz2 > fastq/log.cutadapt.${LIB_NAME}.fwd.txt
		cutadapt -a $RVS...$FWD_RC -A $FWD...$RVS_RC -e $DISS --no-indels --trimmed-only -o fastq/${FWD_LIB}.rvs.fastq -p fastq/${RVS_LIB}.rvs.fastq fastq/${FWD_LIB}.fwd_unt.fastq fastq/${RVS_LIB}.fwd_unt.fastq > fastq/log.cutadapt.${LIB_NAME}.rvs.txt
	elif [ $CLIPPING == "5prime" ]
	then
		cutadapt -g $FWD -G $RVS -e $DISS --no-indels --untrimmed-output=fastq/${FWD_LIB}.fwd_unt.fastq --untrimmed-paired-output=fastq/${RVS_LIB}.fwd_unt.fastq -o fastq/${FWD_LIB}.fwd.fastq -p fastq/${RVS_LIB}.fwd.fastq ${RAWPATH}${FWD_LIB}.fastq.bz2 ${RAWPATH}${RVS_LIB}.fastq.bz2 > fastq/log.cutadapt.${LIB_NAME}.fwd.txt
		cutadapt -g $RVS -G $FWD -e $DISS --no-indels --trimmed-only -o fastq/${FWD_LIB}.rvs.fastq -p fastq/${RVS_LIB}.rvs.fastq fastq/${FWD_LIB}.fwd_unt.fastq fastq/${RVS_LIB}.fwd_unt.fastq > fastq/log.cutadapt.${LIB_NAME}.rvs.txt
	elif [ $CLIPPING == "3prime" ]
	then
		cutadapt -a $RVS_RC -A $FWD_RC -e $DISS --no-indels --untrimmed-output=fastq/${FWD_LIB}.fwd_unt.fastq --untrimmed-paired-output=fastq/${RVS_LIB}.fwd_unt.fastq -o fastq/${FWD_LIB}.fwd.fastq -p fastq/${RVS_LIB}.fwd.fastq ${RAWPATH}${FWD_LIB}.fastq.bz2 ${RAWPATH}${RVS_LIB}.fastq.bz2 > fastq/log.cutadapt.${LIB_NAME}.fwd.txt
		cutadapt -a $FWD_RC -A $RVS_RC -e $DISS --no-indels --trimmed-only -o fastq/${FWD_LIB}.rvs.fastq -p fastq/${RVS_LIB}.rvs.fastq fastq/${FWD_LIB}.fwd_unt.fastq fastq/${RVS_LIB}.fwd_unt.fastq > fastq/log.cutadapt.${LIB_NAME}.rvs.txt
	fi
	# reverse complement (if not empty)
	if [ -s fastq/${FWD_LIB}.rvs.fastq ]
	then
		obicomplement --without-progress-bar --uppercase fastq/${FWD_LIB}.rvs.fastq | sed '/^@/s/_CMP complemented=True;//' | cat fastq/${FWD_LIB}.fwd.fastq - | bzip2 -c > fastq/${LIB_NAME}.fwd.fastq.bz2
		rm fastq/${FWD_LIB}.rvs.fastq fastq/${FWD_LIB}.fwd.fastq fastq/${FWD_LIB}.fwd_unt.fastq
	else
		bzip2 -c fastq/${FWD_LIB}.fwd.fastq > fastq/${LIB_NAME}.fwd.fastq.bz2
		rm fastq/${FWD_LIB}.rvs.fastq fastq/${FWD_LIB}.fwd_unt.fastq
	fi
	if [ -s fastq/${RVS_LIB}.rvs.fastq ]
	then
		obicomplement --without-progress-bar --uppercase fastq/${RVS_LIB}.rvs.fastq | sed '/^@/s/_CMP complemented=True;//' | cat fastq/${RVS_LIB}.fwd.fastq - | bzip2 -c > fastq/${LIB_NAME}.rvs.fastq.bz2
		rm fastq/${RVS_LIB}.rvs.fastq fastq/${RVS_LIB}.fwd.fastq fastq/${RVS_LIB}.fwd_unt.fastq
	else
		bzip2 -c fastq/${RVS_LIB}.fwd.fastq > fastq/${LIB_NAME}.rvs.fastq.bz2
		rm fastq/${RVS_LIB}.rvs.fastq fastq/${RVS_LIB}.fwd_unt.fastq
	fi
	# primer logo
	# weblogo -c classic -s large -t "${LIB_NAME}: $FWD_NAME" < <(awk -v a=${#FWD} 'BEGIN{FS="\t"} NF==11{printf ">%s\n%*s\n",$1,a,$6}' raw_stat/${FWD_LIB}.cutadapt | sed 's/ /N/g' )> raw_stat/weblogo.${LIB_NAME}.forward.eps
	# weblogo -c classic -s large -t "${LIB_NAME}: primer $RVS_NAME" < <(awk -v a=${#RVS} 'BEGIN{FS="\t"} NF==11{printf ">%s\n%*s\n",$1,a,$6}' raw_stat/${RVS_LIB}.cutadapt | sed 's/ /N/g') > raw_stat/weblogo.${LIB_NAME}.reverse.eps
else
	ln -s $PWD/${FWD_LIB}.fastq.bz2 $PWD/fastq/${LIB_NAME}.fwd.fastq.bz2
	ln -s $PWD/${RVS_LIB}.fastq.bz2 $PWD/fastq/${LIB_NAME}.rvs.fastq.bz2
fi

# raw reads stat
for i in fwd rvs
do
	vsearch --quiet --fastq_stats fastq/${LIB_NAME}.$i.fastq.bz2 --log fastq/${LIB_NAME}.$i.stats
	sed -n '/^Read length distribution/,/^$/{s/>=//;p}' fastq/${LIB_NAME}.$i.stats | awk '$3~"%"{print $1,$2}' | sort -k1,1n > raw_stat/$LIB_NAME.$i.length
	sed -n '/^Q score distribution/,/^$/p' fastq/${LIB_NAME}.$i.stats | awk '$5~"%"{print $2,$4}' | sort -k 1,1 | join -a 1 -o 0,2.2 -e "0" <(seq 0 41 | sort -k 1,1) - | sort -k 1,1n | cut -d " " -f 2 > raw_stat/${LIB_NAME}.$i.meanqual
	sed -n '/RatePct/,/^$/p' fastq/${LIB_NAME}.$i.stats | sed '1,2d;$d' | awk '{print $3}' > raw_stat/${LIB_NAME}.$i.meanposqual
	rm fastq/${LIB_NAME}.$i.stats
done

# list files and directories
. $BIN/list_step_files.sh

echo END



