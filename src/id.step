# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/prev.txt
. $BIN/check_previous_step

# record newly set variables and load environment of previous step
(set -o posix; set > config/id.set)
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; if [ $REF_SUBPROJECT != "no" ] ; then declare $var=$(eval echo "$"$var | sed 's/'$REF_SUBPROJECT'/'$SUBPROJECT'/') ; fi ; done < config/OTU_env.txt

# Taxonomic identification
cd processing
if [ $TARG == "COI" ] && [ $CLASSIF == "bayesian" ]
then
	NCPUS=`awk -v N=$NCPUS 'BEGIN{printf "%.f",N/2}'`
fi
# LCA function
lca() {
	parallel --recstart ">" --remove-rec-sep --pipe -k -N1 awk -v cons=$CONS -f $BIN/lca_vsearch.awk
}
export -f lca
export CONS BIN

# ITS
if [ $TARG == "ITS" ]
then
	if [ $ASSIGN_ALL == "yes" ]
	then
		CAND=$FASTA
	else
		CAND=$FASTA_OTUS
	fi
	if [ $ITSX != "no" ]
	then
		TEMPLATE=($DB.$ITSX ${DB}_s.$ITSX)
		IDDEF=1 # no end gap allowed
	else
		TEMPLATE=($DB ${DB}_s)
		IDDEF=2 # end gap allowed
	fi
	if [ $CLASSIF == "bayesian" ]
	then
		# First identification with UNITE dynamic DB
		mothur "#set.dir(tempdefault=$DBFOLD);
		classify.seqs(fasta=$CAND.fasta, template=${TEMPLATE[0]}.fasta, taxonomy=${TEMPLATE[0]}.taxonomy, cutoff=$CONS, method=wang, processors=$NCPUS);
		get.current()"
		TAXO=`sed -n '/^taxonomy=/{s/.*=//;s/\.taxonomy//;p}' current_files.summary`
		# Alternative classification of Fungi only or non-fungus identified sequences against the UNITE dynamic DB including reps singletons
		awk -F";" '$2=="unclassified" || $1!~"Fungi" || $2=="unidentified"{print $1}' $TAXO.taxonomy | cut -f 1 > $TAXO.nofungi.accnos
		if [ -s $TAXO.nofungi.accnos ]
		then
			obigrep --without-progress-bar --id-list=$TAXO.nofungi.accnos $CAND.fasta > $CAND.nofungi.fasta
			mothur "#set.dir(tempdefault=$DBFOLD);
			classify.seqs(fasta=$CAND.nofungi.fasta, template=${TEMPLATE[1]}.fasta, taxonomy=${TEMPLATE[1]}.taxonomy, cutoff=$CONS, method=wang, processors=$NCPUS);
			get.current()"
			TAXO2=`sed -n '/^taxonomy=/{s/.*=//;s/\.taxonomy//;p}' current_files.summary`
		# merge
			sort -k 1,1 $TAXO.taxonomy | join -v 1 - <(sort $TAXO.nofungi.accnos) | cat - $TAXO2.taxonomy > $CAND.unite.wang.taxonomy
			rm $TAXO.taxonomy $TAXO2.taxonomy $CAND.nofungi.fasta
		else
			cp $TAXO.taxonomy $CAND.unite.wang.taxonomy
		fi
		rm $TAXO.nofungi.accnos *.tax.summary
		TAXO=$CAND.unite.wang
		if [ $ASSIGN_ALL == "yes" ]
		then
			mothur "#cluster(method=unique, name=$NAMES_OTUS.names);
			classify.otu(taxonomy=$TAXO.taxonomy, list=current, count=$COUNT.count_table, cutoff=$CONS);
			get.current()"
			CTAXO=`sed -n '/^constaxonomy=/{s/.*=//;s/\.cons.taxonomy//;p}' current_files.summary`
			rm *.rabund *.sabund *.list
		else
			CTAXO=$TAXO.cons
			sort -k 1,1 $TAXO.taxonomy | join -2 2 - <(cut -f 1 ${NAMES_OTUS}.names | nl -n rz | sort -k 2,2) | join - <(sed '1d' ${COUNT_OTUS}.count_table | cut -f 1,2 | sort -k 1,1) | sort -k 3,3n | awk 'BEGIN{OFS="\t";print "OTU","Size","Taxonomy"} {print "Otu"$3,$4,$2}' > $CTAXO.taxonomy
		fi
		rm $TAXO.taxonomy
	elif [ $CLASSIF == "vsearch" ]
	then
		# First identification with UNITE dynamic DB
		vsearch --no_progress --usearch_global ${CAND}.fasta --threads $NCPUS --db ${DBFOLD}/${TEMPLATE[0]}.udb --dbmask none --qmask none --rowlen 0 --notrunclabels --userfields query+id${IDDEF}+target --maxaccepts 0 --maxrejects 32 --top_hits_only --output_no_hits --id 0.6 --iddef ${IDDEF} --userout ${CAND}.hits
		# Alternative classification of Fungi only or non-fungus identified sequences against the UNITE dynamic DB including singletons
		awk '$3=="\\*" || $3!~"k__Fungi" || $3~"k__Fungi;NA" {print $1}' ${CAND}.hits | sed 's/;$//;' | cut -f 1 | sort -u > ${CAND}.nofungi.accnos
		if [ -s ${CAND}.nofungi.accnos ]
		then
			obigrep --without-progress-bar --id-list=${CAND}.nofungi.accnos ${CAND}.fasta > ${CAND}.nofungi.fasta
			vsearch --no_progress --usearch_global ${CAND}.nofungi.fasta --threads $NCPUS --db ${DBFOLD}/${TEMPLATE[1]}.udb --dbmask none --qmask none --rowlen 0 --notrunclabels --userfields query+id${IDDEF}+target --maxaccepts 0 --maxrejects 32 --top_hits_only --output_no_hits --id 0.6 --iddef ${IDDEF} --userout ${CAND}.nofungi.hits
		# Merge
			TAXO=${CAND}.unite
			sort ${CAND}.hits | sed 's/;\t/\t/;s/;$//' | join -v 1 - <(sort ${CAND}.nofungi.accnos) | cat - <(sed 's/;\t/\t/;s/;$//' ${CAND}.nofungi.hits) > $TAXO.hits
			rm ${CAND}.nofungi.fasta ${CAND}.nofungi.hits ${CAND}.hits
		else
			TAXO=$CAND
		fi
		rm ${CAND}.nofungi.accnos
		# Consensus
		if [ $ASSIGN_ALL == "yes" ]
		then
			# Consensus among best matches (allow max 1 % similarity range per OTU)
			awk '{split($2,a,",");for(i in a){print a[i],$1}}' $NAMES_OTUS.names | sort --parallel=$NCPUS -k 1,1 | join -o 1.2,2.2,2.3 - <(sed 's/;\t/\t/;s/;$//;s/ size=[0-9]*//' ${TAXO}.hits | sort --parallel=$NCPUS -k 1,1) | sed 's/;tax=/\t/' | sort --parallel=$NCPUS -k 1,1 -k 2,2nr | awk '{if($1!=p){sim=$2};if($2>=sim-1){print;p=$1}}' | sort --parallel=$NCPUS -k 1,1 -k 4,4 -k 3,3 | awk '$1 != p{printf ">"}{p=$1}1' | parallel -j $NCPUS --recstart ">" --pipe -k lca > ${TAXO}.taxonomy
		else
			sed 's/;\t/\t/;s/;$//;s/;tax=/\t/' ${TAXO}.hits | sort --parallel=$NCPUS -k 1,1 -k 4,4 | awk '$1 != p{printf ">"}{p=$1}1' | parallel -j $NCPUS --recstart ">" --pipe -k lca > ${TAXO}.taxonomy
		fi
		CTAXO=$TAXO.cons
		sort -k 1,1 ${FASTA_OTUS}.taxonomy | join -2 2 - <(cut -f 1 ${NAMES_OTUS}.names | nl -n rz | sort -k 2,2) | join - <(sed '1d' ${COUNT_OTUS}.count_table | cut -f 1,2 | sort -k 1,1) | sort -k 5,5n | awk 'BEGIN{OFS="\t";print "OTU","Size","Taxonomy","similarity","references"} {print "Otu"$5,$6,$3,$2,$4}' > $CTAXO.taxonomy
		rm ${TAXO}.hits ${TAXO}.taxonomy
	fi
else
# Other targets
	if [ -z $DBCUT ]
	then
		TEMPLATE=$DB
		IDDEF=2 # end gap allowed
	else
		TEMPLATE=$DBCUT
		IDDEF=1 # no end gap allowed
	fi
	if [ $CLASSIF == "bayesian" ]
	then
		if [ $ASSIGN_ALL == "yes" ]
		then
			mothur "#set.dir(tempdefault=$DBFOLD);
			classify.seqs(fasta=$FASTA.fasta, template=$TEMPLATE.fasta, taxonomy=$TEMPLATE.taxonomy, cutoff=$CONS, method=wang, processors=$NCPUS);
			cluster(method=unique, name=$NAMES_OTUS.names);
			classify.otu(taxonomy=current, list=current, count=$COUNT.count_table, cutoff=$CONS);
			get.current()"
			CTAXO=`sed -n '/^constaxonomy=/{s/.*=//;s/\.cons.taxonomy//;p}' current_files.summary`
			rm *.rabund *.sabund *.list *.tax.summary
		else
			mothur "#set.dir(tempdefault=$DBFOLD);
			classify.seqs(fasta=${FASTA_OTUS}.fasta, template=$TEMPLATE.fasta, taxonomy=$TEMPLATE.taxonomy, cutoff=$CONS, method=wang, processors=$NCPUS);
			get.current()"
			TAXO=`sed -n '/^taxonomy=/{s/.*=//;s/\.taxonomy//;p}' current_files.summary`
			CTAXO=$TAXO.cons
			sort -k 1,1 $TAXO.taxonomy | join -2 2 - <(cut -f 1 ${NAMES_OTUS}.names | nl -n rz | sort -k 2,2) | join - <(sed '1d' ${COUNT_OTUS}.count_table | cut -f 1,2 | sort -k 1,1) | sort -k 3,3n | awk 'BEGIN{OFS="\t";print "OTU","Size","Taxonomy"} {print "Otu"$3,$4,$2}' > $CTAXO.taxonomy
			rm $TAXO.tax.summary $TAXO.taxonomy
		fi
	elif [ $CLASSIF == "vsearch" ]
	then
		if [ $ASSIGN_ALL == "yes" ]
		then
			vsearch --no_progress --usearch_global ${FASTA}.fasta --threads $NCPUS --db ${DBFOLD}/${TEMPLATE}.udb --dbmask none --qmask none --rowlen 0 --notrunclabels --userfields query+id${IDDEF}+target --maxaccepts 0 --maxrejects 32 --top_hits_only --output_no_hits --id 0.6 --iddef ${IDDEF} --userout ${FASTA}.hits
			# Consensus among best matches
			awk '{split($2,a,",");for(i in a){print a[i],$1}}' $NAMES_OTUS.names | sort --parallel=$NCPUS -k 1,1 | join -o 1.2,2.2,2.3 - <(sed 's/;\t/\t/;s/;$//;s/ size=[0-9]*//' ${FASTA}.hits | sort --parallel=$NCPUS -k 1,1) | sed 's/;tax=/\t/' | sort --parallel=$NCPUS -k 1,1 -k 2,2nr | awk '{if($1!=p){sim=$2};if($2>=sim-1){print;p=$1}}' | sort --parallel=$NCPUS -k 1,1 -k 4,4 -k 3,3 | awk '$1 != p{printf ">"}{p=$1}1' | parallel -j $NCPUS --recstart ">" --pipe -k lca > ${FASTA_OTUS}.taxonomy
		else
			vsearch --no_progress --usearch_global ${FASTA_OTUS}.fasta --threads $NCPUS --db ${DBFOLD}/${TEMPLATE}.udb --dbmask none --qmask none --rowlen 0 --notrunclabels --userfields query+id${IDDEF}+target --maxaccepts 0 --maxrejects 32 --top_hits_only --output_no_hits --id 0.6 --iddef ${IDDEF} --userout ${FASTA_OTUS}.hits
			# Consensus among best matches
			sed 's/;\t/\t/;s/;$//;s/;tax=/\t/' ${FASTA_OTUS}.hits | sort --parallel=$NCPUS -k 1,1 -k 4,4 | awk '$1 != p{printf ">"}{p=$1}1' | parallel -j $NCPUS --recstart ">" --pipe -k lca > ${FASTA_OTUS}.taxonomy
		fi
		CTAXO=${FASTA_OTUS}.cons
		sort -k 1,1 ${FASTA_OTUS}.taxonomy | join -2 2 - <(cut -f 1 ${NAMES_OTUS}.names | nl -n rz | sort -k 2,2) | join - <(sed '1d' ${COUNT_OTUS}.count_table | cut -f 1,2 | sort -k 1,1) | sort -k 5,5n | awk 'BEGIN{OFS="\t";print "OTU","Size","Taxonomy","similarity","references"} {print "Otu"$5,$6,$3,$2,$4}' > $CTAXO.taxonomy
		rm ${FASTA}*.hits ${FASTA_OTUS}.taxonomy
	fi
fi

# Save newly set and updated variables
cd ..
comm -23 <(set -o posix; set | sort) <(sort config/id.set) | tr "=" "\t" | grep -v "^[a-z]" | grep -P -v "^PWD\t" | sed "s/'//g" > config/id_env.txt
rm config/id.set

# list files and directories
. $BIN/list_step_files.sh

echo END
