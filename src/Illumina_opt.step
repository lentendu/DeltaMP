# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# Library to analyse
read SAMPLE FWD_LIB RVS_LIB <<<`sed -n ${ARRAY_TASK}'{s/\.fastq//g;p}' config/lib3.list`
LIB_NAME=`printf "%s\n%s\n" $FWD_LIB $RVS_LIB | sed -e 'N;s/^\(.*\).*\n\1.*$/\1/'`
cd libraries

# Trim or truncate for optimization of sequence quality, both direction separately
for i in ${FWD_NAME} ${RVS_NAME}
do
	if [ $i == "$FWD_NAME" ] ; then j=${RVS_NAME} ; else j=${FWD_NAME} ; fi
	if [ -f fastq/$i.$j.$LIB_NAME.pairend.fastq.$EXT ]
	then
		if [ $TRUNCLEN == "no" ]
		then
			if [ $QFILT == "maxee" ]
			then
				vsearch --quiet --threads 1 --fastq_filter fastq/$i.$j.$LIB_NAME.pairend.fastq.$EXT --eeout --fastq_maxlen $MAXLEN --fastq_maxns $MAXAMBIG --fastq_minlen $MINLEN --fastqout fasta/$i.$j.$LIB_NAME.pairend.trim.fastq
				vsearch --quiet --fastq_eestats2 fasta/$i.$j.$LIB_NAME.pairend.trim.fastq --ee_cutoffs $(seq $MAXEE -$EESTEP 0.5 | tr "\n" "," | sed 's/,$//') --length_cutoffs $MINLEN,*,$LENSTEP --output - | sed -n '/^----/{n;s/^  *[0-9]*  *//;s/  */\t/g;s/(\t*\([0-9\.]*\)%)//g;p}' > ../quality_check/$i.$j.$LIB_NAME.stat
			else
				eval $DECOMP fastq/$i.$j.$LIB_NAME.pairend.fastq.$EXT > fastq/$i.$j.$LIB_NAME.pairend.fastq
				mothur "#set.dir(input=$EXEC/libraries/fastq, output=$EXEC/libraries/fasta);
				set.logfile(name=mothur.$LIB_NAME.logfile, append=T);
				fastq.info(fastq=$i.$j.$LIB_NAME.pairend.fastq);
				set.dir(input=$EXEC/libraries/fasta);
				trim.seqs(fasta=$i.$j.$LIB_NAME.pairend.fasta, qfile=$i.$j.$LIB_NAME.pairend.qual, qaverage=$MINQUAL, minlength=$MINLEN, maxlength=$MAXLEN, maxambig=$MAXAMBIG, maxhomop=$MAXHOMOP, processors=1);
				make.fastq(fasta=$i.$j.$LIB_NAME.pairend.trim.fasta, qfile=$i.$j.$LIB_NAME.pairend.trim.qual)" > /dev/null
				awk '$1!~">"{sum=0;for(i=1;i<=NF;i++){sum+=$i};print sum/NF}' fasta/$i.$j.$LIB_NAME.pairend.trim.qual > fasta/$i.$j.$LIB_NAME.pairend.trim.qual.stat
				for k in $(seq $MINQUAL 30)
				do
					awk -v K=$k 'BEGIN{sum=0} $1>=K{sum+=1}END{print sum}' fasta/$i.$j.$LIB_NAME.pairend.trim.qual.stat
				done | tr "\n" "\t" | sed 's/$/\n/' > ../quality_check/$i.$j.$LIB_NAME.stat
				rm fastq/$i.$j.$LIB_NAME.pairend.fastq fastq/$i.$j.$LIB_NAME.pairend.fasta fastq/$i.$j.$LIB_NAME.pairend.qual fasta/$i.$j.$LIB_NAME.pairend.trim.fasta fasta/$i.$j.$LIB_NAME.pairend.scrap.fasta fasta/$i.$j.$LIB_NAME.pairend.trim.qual fasta/$i.$j.$LIB_NAME.pairend.scrap.qual fasta/$i.$j.$LIB_NAME.pairend.trim.qual.stat
			fi
			vsearch --quiet --fastq_stats fasta/$i.$j.$LIB_NAME.pairend.trim.fastq --log fasta/$i.$j.$LIB_NAME.pairend_trim.stats
			sed -n '/^Read length distribution/,/^$/{s/>=//;p}' fasta/$i.$j.$LIB_NAME.pairend_trim.stats | awk '$3~"%"{print $1,$2}' | sort -k1,1n > raw_stat/$i.$j.$LIB_NAME.pairend_trim.length
			sed -n '/^Q score distribution/,/^$/p' fasta/$i.$j.$LIB_NAME.pairend_trim.stats | awk '$5~"%"{print $2,$4}' | sort -k 1,1 | join -a 1 -o 0,2.2 -e "0" <(seq 0 41 | sort -k 1,1) - | sort -k 1,1n | cut -d " " -f 2 > raw_stat/$i.$j.$LIB_NAME.pairend_trim.meanqual
			sed -n '/RatePct/,/^$/p' fasta/$i.$j.$LIB_NAME.pairend_trim.stats | sed '1,2d;$d' | awk '{print $3}' > raw_stat/$i.$j.$LIB_NAME.pairend_trim.meanposqual
			rm fasta/$i.$j.$LIB_NAME.pairend_trim.stats fasta/$i.$j.$LIB_NAME.pairend.trim.fastq
		else
			if [ $MAXTRUNCLEN != "no" ]
			then
				KEEP=$MAXTRUNCLEN
			else
				KEEP="*"
			fi	
			vsearch --quiet --fastq_eestats2 fastq/$i.${FWD_LIB}.fastq.$EXT --length_cutoffs $TRUNCLEN,"$KEEP",$LENSTEP --ee_cutoffs $(seq 0.5 $EESTEP $MAXEE | tr "\n" "," | sed 's/,$//') --output - | sed '1,/^---/d;s/^  *//;s/  */\t/g;s/\([0-9]*\)(\t*\([0-9\.]*\)%)/\1 \2/g' > ../quality_check/$i.${FWD_LIB}.eestat
			vsearch --quiet --fastq_eestats2 fastq/$j.${RVS_LIB}.fastq.$EXT --length_cutoffs $TRUNCLEN,"$KEEP",$LENSTEP --ee_cutoffs $(seq 0.5 $EESTEP $MAXEE | tr "\n" "," | sed 's/,$//') --output - | sed '1,/^---/d;s/^  *//;s/  */\t/g;s/\([0-9]*\)(\t*\([0-9\.]*\)%)/\1 \2/g' > ../quality_check/$j.${RVS_LIB}.eestat
		fi
	fi
done

# list files and directories
(. $BIN/list_step_files.sh)

echo END
