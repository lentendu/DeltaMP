# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# record newly set variables
(set -o posix; set > config/merge.set)

# Merge all samples fasta and count files (removing gaps if any)
SAMP_NAME=$(cut -f 1 config/lib4.list)
cd processing
parallel -j $NCPUS -k 'FASTA=$(sed -n "/^fasta=/{s/.*=//;p}" {}/current_files.summary); sed "/>/!s/[-\.]//g" {}/$FASTA' ::: $SAMP_NAME > $SUBPROJECT.fasta
parallel -j $NCPUS -k 'COUNT=$(sed -n "/^count=/{s/.*=//;p}" {}/current_files.summary); sed "1d;s/$/\t{}/" {}/$COUNT' ::: $SAMP_NAME > $SUBPROJECT.groups

# If denoised 454 reads and no ITSx extraction, chop to the same length
if [ "$DENOISE" == "yes" ] && [ $ITSX == "no" ]
then
	LENGTH=`cut -d "." -f 1 $EXEC/quality_check/trimming.parameters.txt`
	MIN_LENGTH=`awk -v L=$LENGTH 'BEGIN{min=L} $1!~"^>" && length($1)<min{min=length($1)}END{print min}' $SUBPROJECT.fasta`
	obicut --without-progress-bar --uppercase -e $MIN_LENGTH $SUBPROJECT.fasta | sed 's/_SUB.*$//' | twofasta > $SUBPROJECT.tmp.fasta && mv $SUBPROJECT.tmp.fasta $SUBPROJECT.fasta
fi

# Dereplicate
mothur "#unique.seqs(fasta=$SUBPROJECT.fasta);
get.current()"
unset FASTA NAMES
FASTA=`sed -n '/^fasta=/{s/.*=//;s/\.fasta//;p}' current_files.summary`
NAMES=`sed -n '/^name=/{s/.*=//;s/\.names//;p}' current_files.summary`

# count table
tr "," " " < $NAMES.names | awk '{for(i=2;i<=NF;i++){print $i,$1}}' | sort --parallel=$NCPUS -k 1,1 | join -o 1.2,0,2.3,2.2 - <(sort --parallel=$NCPUS -k 1,1 $SUBPROJECT.groups) | sort --parallel=$NCPUS -k 1,1 -k 3,3 | awk '$1!=p{p=$1;sub("^",">",$1)} {print}' | parallel -j $NCPUS --recstart ">" --remove-rec-sep --pipe -k "awk -v S='$SAMP_NAME' -f $BIN/make_count.awk" > $FASTA.count_table
COUNT=$FASTA

# Save newly set variables
cd ..
comm -23 <(set -o posix; set | sort) <(sort config/merge.set) | tr "=" "\t" | grep -v "^[a-z]" | grep -P -v "^PWD\t" | sed "s/'//g" > config/merge_env.txt
rm config/merge.set

# list files and directories
. $BIN/list_step_files.sh

echo END
