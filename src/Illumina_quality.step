# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# Demultiplex check
if [ $DEMULTI == "no" ]
then
	if [ -z $DUALID ]
	then
		. $BIN/check_${TECH}_barcodes.sh > archives/$SUBPROJECT.outputs/demultiplexing_check.tsv
	else
		cp libraries/fastq/demultiplexing_info.* archives/$SUBPROJECT.outputs/
	fi
fi

# Raw, primer detected, pair-end and trim read counts per library
while read samp fwd rvs
do
	lib=$(echo $fwd $rvs | sed 's/\(.*\)[^ ]* \1.*$/\1/')
	for i in ${FWD_NAME} ${RVS_NAME}
	do
		if [ $i == "$FWD_NAME" ] ; then rawlib=$lib.fwd ; j=${RVS_NAME} ; else rawlib=$lib.rvs ; j=${FWD_NAME} ; fi
		if [ -f libraries/fasta/$i.$j.$lib.pairend.fasta ]
		then
			RAW_COUNT=$(awk '{sum+=$2}END{print sum}' libraries/raw_stat/$i.$rawlib.length)
			if [ $PALG == "vsearch" ]
			then
				paste <(echo -e "$RAW_COUNT") <(awk '$2=="Pairs"{print $1;exit}' libraries/fastq/log.pairend.$i.$lib.txt) <(awk '$2=="Merged"{print $1;exit}' libraries/fastq/log.pairend.$i.$lib.txt) quality_check/$i.$j.$lib.stat
			else
				paste <(echo -e "$RAW_COUNT") <(tac libraries/fastq/log.pairend.$i.$lib.txt | grep -m 1 -P "STAT\tREADS" | cut -f 4) <(tac libraries/fastq/log.pairend.$i.$lib.txt | grep -m 1 -P "STAT\tOK\t" | cut -f 4) quality_check/$i.$j.$lib.stat
			fi
		fi
	done | awk '{for(i=1;i<=NF;i++){s[i]+=$i}}END{for(i=1;i<=NF;i++){printf "\t%s", s[i]}}' | sed "s/^/$samp\t$lib/;s/$/\n/"
done < config/lib3.list | cat <(paste <(echo -e "Sample\tLibrary\tRaw\tPrimer detected\tPair-end") <(seq $MINQUAL 30 | sed 's/\(.*\)/Trimmed at \1 Phred score/' | tr "\n" "\t" | sed 's/$/\n/')) - > quality_check/$SUBPROJECT.lib_counts.tsv
cd quality_check

# per sample
sed '1d' $SUBPROJECT.lib_counts.tsv | sort -k 1,1 | awk 'BEGIN{FS="\t"}{if(NR==1){S=$1;for(i=3;i<=NF;i++){a[i]=$i};printf "%s",S} else {if($1==S){for(i=3;i<=NF;i++){a[i]+=$i}} else {S=$1;for(i=3;i<=NF;i++){printf "\t%s",a[i];a[i]=$i};printf "\n%s",S}}}END{for(i=3;i<=NF;i++){printf "\t%s",a[i]};printf "\n"}' | mimato | cat <(head -1 $SUBPROJECT.lib_counts.tsv | sed 's/\tLibrary\t/\t/') - > $SUBPROJECT.sample_counts.tsv

# Count check
head -n -4 $SUBPROJECT.sample_counts.tsv | awk -v M=$MIN_DEPTH 'NR>1{if(M<=1){if($3<M*$2) print $1,$3,$3/$2} else if(M>1){if($3<M)print $1,$3}}' > min_depth.raw_with_primer.test
head -n -4 $SUBPROJECT.sample_counts.tsv | awk -v M=$MIN_DEPTH 'NR>1{if(M<=1){if($4<M*$3) print $1,$4,$4/$3} else if(M>1){if($4<M)print $1,$4}}' > min_depth.pairend.test
head -n -4 $SUBPROJECT.sample_counts.tsv | awk -v M=$MIN_DEPTH 'NR>1{if(M<=1){if($5<M*$4) print $1,$5,$5/$4} else if(M>1){if($5<M)print $1,$5}}' > min_depth.trim.test
if (( $(echo "$MIN_DEPTH > 1" |bc -l) ))
then
	MIN_DEPTH_ECHO=$MIN_DEPTH
else
	MIN_DEPTH_ECHO="$MIN_DEPTH times the amount of \${TRIMSTEPS[\$((i-1))]}"
fi
TRIMSTEPS=(raw raw_with_primer pairend trim)
for i in $(seq 1 $((${#TRIMSTEPS[@]}-1)))
do
	if [ -s min_depth.${TRIMSTEPS[$i]}.test ]
	then
		echo "The following sample(s) do not have the requested minimum amount of ${TRIMSTEPS[$i]} reads fixed at "$(eval echo $MIN_DEPTH_ECHO)" reads:"
		echo "Sample Reads"
		cat min_depth.${TRIMSTEPS[$i]}.test
		echo ""
		echo "Aborting"
		awk 'BEGIN{FS=OFS="\t"};{print $1,$2,$3,$4,$5}' $SUBPROJECT.sample_counts.tsv > $SUBPROJECT.summary.stat.tsv
		ln -s $PWD/$SUBPROJECT.summary.stat.tsv $EXEC/archives/$SUBPROJECT.outputs/$SUBPROJECT.read_counts.tsv
		. $BIN/list_step_files.sh
		exit 100
	else
		eval echo "All samples have at least the minimum amount of ${TRIMSTEPS[$i]} reads fixed at $MIN_DEPTH_ECHO reads."
	fi
done

# Optimize quality
if (( $(echo "$MIN_DEPTH > 1" |bc -l) ))
then
	# above integer threshold and more than 75% of raw reads
	head -n -4 $SUBPROJECT.sample_counts.tsv | transpose_tab | sed '1,4d;/^[ \t]*$/d' | tac | cat <(head -n -4 $SUBPROJECT.sample_counts.tsv | cut -f 5 | transpose_tab) - | awk -v M=$MIN_DEPTH 'BEGIN{FS="\t"} {if(NR==1){for(i=2;i<=NF;i++){ref[i]=$i};next} ; for(i=2;i<=NF;i++){if($i<M || $i<ref[i]*0.75){next}};print $1;exit}' | sed 's/Trimmed at //;s/ Phred score//' > optimized.quality.txt
else
	# above ratio of pair-end reads
	head -n -4 $SUBPROJECT.sample_counts.tsv | cut -f 5-10 | paste - <(head -n -4 $SUBPROJECT.sample_counts.tsv | cut -f 4) | transpose_tab | tac | awk -v M=$MIN_DEPTH 'BEGIN{FS="\t"}{if(NR==1){for (i=2;i<=NF;i++){R[i]=$i};next} ; for(i=2;i<=NF;i++){if($i<R[i]*M){next}};print $1;exit}' | sed 's/Trimmed at //;s/ Phred score//' > optimized.quality.txt
fi
QUAL=`cat optimized.quality.txt`
cut -f 1-4,$(($QUAL - $MINQUAL + 5)) $SUBPROJECT.sample_counts.tsv > $SUBPROJECT.summary.stat.tsv
ln -s $PWD/$SUBPROJECT.summary.stat.tsv $EXEC/archives/$SUBPROJECT.outputs/$SUBPROJECT.read_counts.tsv

# Merge raw stat statistics
cd $EXEC/libraries/raw_stat
if [ $DEMULTI == "yes" ]
then
	Rscript --vanilla $BIN/Rscript_raw_stat_figures_Illumina.R $SUBPROJECT $BIN DeltaMP_${VERSION[DELTAMP]} all $FWD_NAME $RVS_NAME
	gs -q -sDEVICE=pdfwrite -o $EXEC/archives/$SUBPROJECT.outputs/$SUBPROJECT.raw_and_pair-end_reads_statistics.pdf $SUBPROJECT.quality.pdf $SUBPROJECT.length.pdf $SUBPROJECT.position_quality.pdf $SUBPROJECT.legend.pdf
else
	for LIB_NAME in $(cut -f 1 $EXEC/config/lib2.list)
	do
		Rscript --vanilla $BIN/Rscript_raw_stat_figures_Illumina.R $SUBPROJECT $BIN DeltaMP_${VERSION[DELTAMP]} $LIB_NAME $FWD_NAME $RVS_NAME
		gs -q -sDEVICE=pdfwrite -o $LIB_NAME.raw_and_pair-end_reads_statistics.pdf $SUBPROJECT.${LIB_NAME}.quality.*.pdf $SUBPROJECT.${LIB_NAME}.length.*.pdf $SUBPROJECT.${LIB_NAME}.position_quality.*.pdf $SUBPROJECT.${LIB_NAME}.legend.pdf
		rm $SUBPROJECT.${LIB_NAME}.quality.*.pdf $SUBPROJECT.${LIB_NAME}.length.*.pdf $SUBPROJECT.${LIB_NAME}.position_quality.*.pdf $SUBPROJECT.${LIB_NAME}.legend.pdf
	done
	gs -q -sDEVICE=pdfwrite -o $EXEC/archives/$SUBPROJECT.outputs/$SUBPROJECT.raw_and_pair-end_reads_statistics.pdf *.raw_and_pair-end_reads_statistics.pdf
	rm *.raw_and_pair-end_reads_statistics.pdf
fi

# list files and directories
. $BIN/list_step_files.sh

echo END

