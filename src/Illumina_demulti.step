# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

# Define the library to demultiplex
read LIB_NAME FWD_SUF RVS_SUF <<<`sed -n ${ARRAY_TASK}'p' config/lib2.list`
FWD_LIB=${LIB_NAME}${FWD_SUF/.$RAW_EXT.*/}
RVS_LIB=${LIB_NAME}${RVS_SUF/.$RAW_EXT.*/}
cd libraries

#Define barcode difference allowed for the library
if [ -z $DUALID ]
then
	if [ $BDIFFS == "a" ]
	then
		unset BDIFFS
		sed -n '/^>/!{s/^[\^X]/barcode /;p}' fastq/oligos.$LIB_NAME > MID.$LIB_NAME
		BDIFFS=$(barcode_mismatch_check.sh MID.$LIB_NAME)
		rm MID.$LIB_NAME
	fi
else
	if [ $BDIFFS == "a" ]
	then
		sed -n '/^>/!{s/^[\^X]/barcode /;p}' fastq/oligos.F.$LIB_NAME > MID.F.$LIB_NAME
		FBDIFFS=$(barcode_mismatch_check.sh MID.F.$LIB_NAME)
		sed -n '/^>/!{s/^[\^X]/barcode /;p}' fastq/oligos.R.$LIB_NAME > MID.R.$LIB_NAME
		RBDIFFS=$(barcode_mismatch_check.sh MID.R.$LIB_NAME)
		rm MID.F.$LIB_NAME MID.R.$LIB_NAME
	else
		FBDIFFS=$BDIFFS
		RBDIFFS=$BDIFFS
	fi
fi

# cutadapt with 5' adaptors
eval mkdir ${LIB_NAME}_part_{01..$NCPUS}
selfmerge () { cat $(find . -type f -path "./${LIB_NAME}_part_*/$1" | sort) > fastq/$1 ; }
export -f selfmerge
export LIB_NAME FWD_LIB RVS_LIB
if [ $EXT == "gz" ]; then COMP="pigz -p 1 -b 1024" ; DECOMP="unpigz -p $NCPUS -b 1024 -ck" ; elif [ $EXT == "bz2" ] ; then COMP=bzip2 ; DECOMP="bunzip2 -ck" ; fi
if [ -z $DUALID ]
then
	awk -v B=$BDIFFS '{if($1~"^>"){print} else {match($1,"[ATCG][ATCG]*");if(B==0){print $1";o="RLENGTH";e=0"} else {print $1";o="RLENGTH";e="(int(B/RLENGTH*100)+1)/100}}}' fastq/oligos.$LIB_NAME > oligos.$LIB_NAME.param
	if [ $SBS == "both" ]
	then
		NLINES=$($DECOMP ${FWD_LIB}.fastq.$EXT | awk -v N=$NCPUS 'END{C=NR/4/N; if(C==int(C)){print C*4} else print int(C+1)*4}')
		$DECOMP ${FWD_LIB}.fastq.$EXT | split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' - ${FWD_LIB}.part_
		$DECOMP ${RVS_LIB}.fastq.$EXT | split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' - ${RVS_LIB}.part_
		parallel -j $NCPUS "cutadapt -g file:oligos.${LIB_NAME}.param -G file:oligos.${LIB_NAME}.param --no-indels --trimmed-only --pair-adapters -o ${LIB_NAME}_{}/{name}.${FWD_LIB}.fastq -p ${LIB_NAME}_{}/{name}.${RVS_LIB}.fastq ${FWD_LIB}.{}.fastq ${RVS_LIB}.{}.fastq > ${LIB_NAME}_{}/log_cutadapt.demultiplex.${LIB_NAME}.txt" ::: $(eval echo part_{01..$NCPUS})
		rm ${FWD_LIB}.part_* ${RVS_LIB}.part_*
		tail -n +1 ${LIB_NAME}_part_*/log_cutadapt.demultiplex.${LIB_NAME}.txt > fastq/log_cutadapt.demultiplex.${LIB_NAME}.txt
	else
		FWDANCH="" ; RVSANCH=""
		if [ $SBS == "forward" ] ; then if [ $PRIM_ANCH == "yes" ] ; then RVSANCH="^" ; fi ; CUTDIR="-g" ; elif [ $SBS == "reverse" ] ; then if [ $PRIM_ANCH == "yes" ] ; then FWDANCH="^" ; fi ; CUTDIR="-G" ; fi
		FPDIFFS=$(awk -v P=$PDIFFS -v F=${#FWD} 'BEGIN{print (int(P/F*100)+1)/100}')
		RPDIFFS=$(awk -v P=$PDIFFS -v R=${#RVS} 'BEGIN{print (int(P/R*100)+1)/100}')
		cutadapt -j $NCPUS --no-indels --action=none -g "$FWDANCH$FWD;o=$((${#FWD}-2));e=$FPDIFFS" -G "$RVSANCH$RVS;o=$((${#RVS}-2));e=$RPDIFFS" --untrimmed-output unt.${FWD_LIB}.fastq.$EXT --untrimmed-paired-output unt.${RVS_LIB}.fastq.$EXT -o ${FWD_NAME}.${FWD_LIB}.fastq -p ${RVS_NAME}.${RVS_LIB}.fastq ${FWD_LIB}.fastq.$EXT ${RVS_LIB}.fastq.$EXT > fastq/log_cutadapt.demultiplex.raw_primers.FR.${LIB_NAME}.txt
		cutadapt -j $NCPUS --no-indels --trimmed-only --action=none -g "$RVSANCH$RVS;o=$((${#RVS}-2));e=$RPDIFFS" -G "$FWDANCH$FWD;o=$((${#FWD}-2));e=$FPDIFFS" -o ${RVS_NAME}.${FWD_LIB}.fastq -p ${FWD_NAME}.${RVS_LIB}.fastq unt.${FWD_LIB}.fastq.$EXT unt.${RVS_LIB}.fastq.$EXT > fastq/log_cutadapt.demultiplex.raw_primers.RF.${LIB_NAME}.txt
		NLINES=$(awk -v N=$NCPUS 'END{C=NR/4/N; if(C==int(C)){print C*4} else print int(C+1)*4}' ${FWD_NAME}.${FWD_LIB}.fastq)
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' ${FWD_NAME}.${FWD_LIB}.fastq ${FWD_NAME}.${FWD_LIB}.part_
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' ${RVS_NAME}.${RVS_LIB}.fastq ${RVS_NAME}.${RVS_LIB}.part_
		parallel -j $NCPUS "cutadapt --no-indels --trimmed-only $CUTDIR file:oligos.$LIB_NAME.param -o ${LIB_NAME}_{}/${FWD_NAME}.{name}.${FWD_LIB}.fastq -p ${LIB_NAME}_{}/${RVS_NAME}.{name}.${RVS_LIB}.fastq ${FWD_NAME}.${FWD_LIB}.{}.fastq ${RVS_NAME}.${RVS_LIB}.{}.fastq > ${LIB_NAME}_{}/log_cutadapt.demultiplex.FR.${LIB_NAME}.txt" ::: $(eval echo part_{01..$NCPUS})
		NLINES=$(awk -v N=$NCPUS 'END{C=NR/4/N; if(C==int(C)){print C*4} else print int(C+1)*4}' ${RVS_NAME}.${FWD_LIB}.fastq)
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' ${RVS_NAME}.${FWD_LIB}.fastq ${RVS_NAME}.${FWD_LIB}.part_
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' ${FWD_NAME}.${RVS_LIB}.fastq ${FWD_NAME}.${RVS_LIB}.part_
		parallel -j $NCPUS "cutadapt --no-indels --trimmed-only $CUTDIR file:oligos.$LIB_NAME.param -o ${LIB_NAME}_{}/${FWD_NAME}.{name}.${RVS_LIB}.fastq -p ${LIB_NAME}_{}/${RVS_NAME}.{name}.${FWD_LIB}.fastq ${FWD_NAME}.${RVS_LIB}.{}.fastq ${RVS_NAME}.${FWD_LIB}.{}.fastq > ${LIB_NAME}_{}/log_cutadapt.demultiplex.RF.${LIB_NAME}.txt" ::: $(eval echo part_{01..$NCPUS})
		rm ${FWD_NAME}.${FWD_LIB}.*fastq ${RVS_NAME}.${RVS_LIB}.*fastq ${RVS_NAME}.${FWD_LIB}.*fastq ${FWD_NAME}.${RVS_LIB}.*fastq unt.${FWD_LIB}.fastq.$EXT unt.${RVS_LIB}.fastq.$EXT
		revmerge () { cd ${LIB_NAME}_$1 ;  for i in $(ls *${FWD_LIB}.fastq | cut -d "." -f 2- | sort -u); do cat *.$i > $i ; cat $(ls -r *.${i/$FWD_LIB/$RVS_LIB}) > ${i/$FWD_LIB/$RVS_LIB} ; rm *.$i *.${i/$FWD_LIB/$RVS_LIB} ; done ; cd .. ; }
		export -f revmerge
		parallel -j $NCPUS revmerge ::: $(eval echo part_{01..$NCPUS})
		tail -n +1 ${LIB_NAME}_part_*/log_cutadapt.demultiplex.FR.${LIB_NAME}.txt > fastq/log_cutadapt.demultiplex.FR.${LIB_NAME}.txt
		tail -n +1 ${LIB_NAME}_part_*/log_cutadapt.demultiplex.RF.${LIB_NAME}.txt > fastq/log_cutadapt.demultiplex.RF.${LIB_NAME}.txt
	fi
	parallel -j $NCPUS -k selfmerge ::: $(basename -a $(ls ${LIB_NAME}_part_*/*fastq) | sort -u)
	rm -r ${LIB_NAME}_part_* oligos.$LIB_NAME.param
else
	awk -v F=$FBDIFFS '{if($1~"^>"){print} else {match($1,"[ATCG][ATCG]*");if(F==0){print $1";o="RLENGTH";e=0"} else {print $1";o="RLENGTH";e="(int(F/RLENGTH*100)+1)/100}}}' fastq/oligos.F.$LIB_NAME > oligos.F.$LIB_NAME.param
	awk -v R=$RBDIFFS '{if($1~"^>"){print} else {match($1,"[ATCG][ATCG]*");if(R==0){print $1";o="RLENGTH";e=0"} else {print $1";o="RLENGTH";e="(int(R/RLENGTH*100)+1)/100}}}' fastq/oligos.R.$LIB_NAME > oligos.R.$LIB_NAME.param
	if [ $BINDBP == "yes" ]
	then
		FPDIFFS=$(awk -v P=$PDIFFS -v F=${#FWD} 'BEGIN{print (int(P/F*100)+1)/100}')
		RPDIFFS=$(awk -v P=$PDIFFS -v R=${#RVS} 'BEGIN{print (int(P/R*100)+1)/100}')
		cutadapt -j $NCPUS --no-indels --action=none -g "$FWD;o=$((${#FWD}-2));e=$FPDIFFS" -G "$RVS;o=$((${#RVS}-2));e=$RPDIFFS" --untrimmed-output unt.${FWD_LIB}.fastq.$EXT --untrimmed-paired-output unt.${RVS_LIB}.fastq.$EXT -o ${FWD_NAME}.${FWD_LIB}.fastq -p ${RVS_NAME}.${RVS_LIB}.fastq ${FWD_LIB}.fastq.$EXT ${RVS_LIB}.fastq.$EXT > fastq/log_cutadapt.demultiplex.raw_primers.FR.${LIB_NAME}.txt
		cutadapt -j $NCPUS --no-indels --trimmed-only --action=none -g "$RVS;o=$((${#RVS}-2));e=$RPDIFFS" -G "$FWD;o=$((${#FWD}-2));e=$FPDIFFS" -o ${RVS_NAME}.${FWD_LIB}.fastq -p ${FWD_NAME}.${RVS_LIB}.fastq unt.${FWD_LIB}.fastq.$EXT unt.${RVS_LIB}.fastq.$EXT > fastq/log_cutadapt.demultiplex.raw_primers.RF.${LIB_NAME}.txt
		NLINES=$(awk -v N=$NCPUS 'END{C=NR/4/N; if(C==int(C)){print C*4} else print int(C+1)*4}' ${FWD_NAME}.${FWD_LIB}.fastq)
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' ${FWD_NAME}.${FWD_LIB}.fastq ${FWD_NAME}.${FWD_LIB}.part_
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' ${RVS_NAME}.${RVS_LIB}.fastq ${RVS_NAME}.${RVS_LIB}.part_
		parallel -j $NCPUS "cutadapt --no-indels --trimmed-only -g file:oligos.F.$LIB_NAME.param -G file:oligos.R.$LIB_NAME.param -o ${LIB_NAME}_{}/{name1}-{name2}.${FWD_LIB}.fastq -p ${LIB_NAME}_{}/{name1}-{name2}.${RVS_LIB}.fastq ${FWD_NAME}.${FWD_LIB}.{}.fastq ${RVS_NAME}.${RVS_LIB}.{}.fastq > ${LIB_NAME}_{}/log_cutadapt.demultiplex.FR.${LIB_NAME}.txt" ::: $(eval echo part_{01..$NCPUS})
		NLINES=$(awk -v N=$NCPUS 'END{C=NR/4/N; if(C==int(C)){print C*4} else print int(C+1)*4}' ${RVS_NAME}.${FWD_LIB}.fastq)
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' ${RVS_NAME}.${FWD_LIB}.fastq ${RVS_NAME}.${FWD_LIB}.part_
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' ${FWD_NAME}.${RVS_LIB}.fastq ${FWD_NAME}.${RVS_LIB}.part_
		parallel -j $NCPUS "cutadapt --no-indels --trimmed-only -g file:oligos.R.$LIB_NAME.param -G file:oligos.F.$LIB_NAME.param -o ${LIB_NAME}_{}/{name1}-{name2}.${FWD_LIB}.fastq -p ${LIB_NAME}_{}/{name1}-{name2}.${RVS_LIB}.fastq ${RVS_NAME}.${FWD_LIB}.{}.fastq ${FWD_NAME}.${RVS_LIB}.{}.fastq > ${LIB_NAME}_{}/log_cutadapt.demultiplex.RF.${LIB_NAME}.txt" ::: $(eval echo part_{01..$NCPUS})
		parallel -j $NCPUS selfmerge ::: $(basename -a $(ls ${LIB_NAME}_part_*/*fastq) | sort -u)
		rm ${FWD_NAME}.${FWD_LIB}.*fastq ${RVS_NAME}.${RVS_LIB}.*fastq ${RVS_NAME}.${FWD_LIB}.*fastq ${FWD_NAME}.${RVS_LIB}.*fastq unt.${FWD_LIB}.fastq.$EXT unt.${RVS_LIB}.fastq.$EXT
	else
		NLINES=$($DECOMP ${FWD_LIB}.fastq.$EXT | awk -v N=$NCPUS 'END{C=NR/4/N; if(C==int(C)){print C*4} else print int(C+1)*4}')
		$DECOMP ${FWD_LIB}.fastq.$EXT | split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' - ${FWD_LIB}.part_
		$DECOMP ${RVS_LIB}.fastq.$EXT | split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' - ${RVS_LIB}.part_
		parallel -j $NCPUS "cutadapt --no-indels -g file:oligos.F.$LIB_NAME.param -G file:oligos.R.$LIB_NAME.param -o ${LIB_NAME}_{}/{name1}-{name2}.${FWD_LIB}.fastq -p ${LIB_NAME}_{}/{name1}-{name2}.${RVS_LIB}.fastq ${FWD_LIB}.{}.fastq ${RVS_LIB}.{}.fastq > ${LIB_NAME}_{}/log_cutadapt.demultiplex.FR.${LIB_NAME}.txt" ::: $(eval echo part_{01..$NCPUS})
		parallel -j $NCPUS -k selfmerge ::: $(basename -a $(ls ${LIB_NAME}_part_*/*fastq) | sort -u)
		cat fastq/*unknown*.${FWD_LIB}.fastq > unt.${FWD_LIB}.fastq
		cat fastq/*unknown*.${RVS_LIB}.fastq > unt.${RVS_LIB}.fastq
		rm fastq/*unknown*.${FWD_LIB}.fastq fastq/*unknown*.${RVS_LIB}.fastq ${LIB_NAME}_part_*/*fastq
		NLINES=$(awk -v N=$NCPUS 'END{C=NR/4/N; if(C==int(C)){print C*4} else print int(C+1)*4}' unt.${FWD_LIB}.fastq)
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' unt.${FWD_LIB}.fastq unt.${FWD_LIB}.part_
		split -l $NLINES --numeric-suffixes=1 --additional-suffix='.fastq' unt.${RVS_LIB}.fastq unt.${RVS_LIB}.part_
		parallel -j $NCPUS "cutadapt --no-indels --trimmed-only -g file:oligos.R.$LIB_NAME.param -G file:oligos.F.$LIB_NAME.param -o ${LIB_NAME}_{}/{name1}-{name2}.${FWD_LIB}.fastq -p ${LIB_NAME}_{}/{name1}-{name2}.${RVS_LIB}.fastq unt.${FWD_LIB}.{}.fastq unt.${RVS_LIB}.{}.fastq > ${LIB_NAME}_{}/log_cutadapt.demultiplex.RF.${LIB_NAME}.txt" ::: $(eval echo part_{01..$NCPUS})
		parallel -j $NCPUS -k selfmerge ::: $(basename -a $(ls ${LIB_NAME}_part_*/*fastq) | sort -u)
		rm ${FWD_LIB}.part_[0-9]*.fastq ${RVS_LIB}.part_[0-9]*.fastq unt.${FWD_LIB}.part* unt.${RVS_LIB}.part*
	fi
	tail -n +1 ${LIB_NAME}_part_*/log_cutadapt.demultiplex.FR.${LIB_NAME}.txt > fastq/log_cutadapt.demultiplex.FR.${LIB_NAME}.txt
	tail -n +1 ${LIB_NAME}_part_*/log_cutadapt.demultiplex.RF.${LIB_NAME}.txt > fastq/log_cutadapt.demultiplex.RF.${LIB_NAME}.txt
	rm  -r ${LIB_NAME}_part_* oligos.F.$LIB_NAME.param oligos.R.$LIB_NAME.param
	# merge reads per sample
	sed 's/^[>\^X]//' fastq/oligos.F.$LIB_NAME | paste - - | sort -k 2,2 | join -1 2 - <(awk -v L=${LIB_NAME}$FWD_SUF 'BEGIN{FS="\t"} $3==L{split($1,a,",");print a[1],a[2],$2}' $EXEC/config/barcodes.txt | sort -k 1,1) | sort -k 3,3 | join -1 3 -2 2 - <(sed 's/^[>\^X]//' fastq/oligos.R.$LIB_NAME | paste - - | sort -k 2,2) | awk '{print $4,$3,$5}' | sort -k 1,1 > fastq/oligo_pairs.${LIB_NAME}.txt
	ls fastq/*.${FWD_LIB}.fastq > tmp.$FWD_LIB
	ls fastq/*.${RVS_LIB}.fastq > tmp.$RVS_LIB
	lib2sam () {
		read sam bf br <<< "$@"
		fwdlib=$(grep "${bf}-${br}\.\|${br}-${bf}\." tmp.$FWD_LIB)
		rvslib=$(grep "${bf}-${br}\.\|${br}-${bf}\." tmp.$RVS_LIB)
		if [ ! -z "$fwdlib" ]
		then
			cat $fwdlib > fastq/$sam.${FWD_LIB}.fastq
			cat $rvslib > fastq/$sam.${RVS_LIB}.fastq
			rm $fwdlib $rvslib
		fi
	}
	export -f lib2sam
	cat fastq/oligo_pairs.${LIB_NAME}.txt | parallel -j $NCPUS lib2sam
	rm tmp.$FWD_LIB tmp.$RVS_LIB
	
	# demultiplexing stats and report on other barcode pairs found (potential tag-jumping)
	NBFB=$(grep -c "^>" fastq/oligos.F.$LIB_NAME)
	NBRB=$(grep -c "^>" fastq/oligos.R.$LIB_NAME)
	NBS=$(sed -n '$=' fastq/oligo_pairs.${LIB_NAME}.txt)
	OKS=($(ls fastq/*.${FWD_LIB}.fastq | join - <(cut -d " " -f 1 fastq/oligo_pairs.${LIB_NAME}.txt | sed "s@^@fastq/@;s@\$@\.${FWD_LIB}\.fastq@" | sort)))
	READALL=$($DECOMP ${FWD_LIB}.fastq.$EXT | echo $((`wc -l`/4)))
	READOKS=$(for i in ${OKS[@]} ; do sed -n '1~4p' $i | sed -n '$=' ; done | awk -v A=$READALL '{s+=$1}END{printf "%.2f", s/A*100}')
	UNP=($(ls fastq/*.${FWD_LIB}.fastq | join -v 1 - <(cut -d " " -f 1 fastq/oligo_pairs.${LIB_NAME}.txt | sed "s@^@fastq/@;s@\$@\.${FWD_LIB}\.fastq@" | sort)))
	cat << EOF > fastq/demultiplexing_info.$LIB_NAME.txt
There was $NBFB forward and $NBRB reverse barcodes provided for demultiplexing the $NBS samples in the library $LIB_NAME (${FWD_LIB}.fastq.$EXT ${RVS_LIB}.fastq.$EXT)
From the $(($NBFB*$NBRB)) possible barcode pairs, ${#OKS[@]} pairs from the $NBS samples were found, representing ~ $READOKS % of the original $READALL total read count of $LIB_NAME.
EOF
	if [ ${#UNP[@]} -gt 0 ]
	then
		UNPP=$(basename -a ${UNP[@]} | sed -r 's/^(R[0-9]*)-(F[0-9]*)/\2-\1/' | sort -u | sed -n '$=')
		READUNP=$(for i in ${UNP[@]} ; do sed -n '1~4p' $i | sed -n '$=' ; done | awk -v A=$READALL '{s+=$1}END{printf "%.4f", s/A*100}')
		echo "$UNPP unexpected pairs were also found, accounting for $READUNP % of the original $LIB_NAME reads." >> fastq/demultiplexing_info.$LIB_NAME.txt
	else
		echo "None of the $(($NBFB*$NBRB-$NBS)) unexpected pairs were found." >> fastq/demultiplexing_info.$LIB_NAME.txt
	fi
fi

# compress all fastq files
ls fastq/*${LIB_NAME}*.fastq | parallel -j $NCPUS $COMP

# list files and directories
(. $BIN/list_step_files.sh)

echo END
