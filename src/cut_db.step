# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt

# check database presence
cd $DBFOLD
if [ -f $DBCUT.fasta ] && [ -f $DBCUT.taxonomy ]
then
	if [ -z $DBCHOP ]
	then
		echo "The database $DBCUT.fasta already exist."
		echo "END"
		exit 0
	else
		if [ -f $DBCHOP.fasta ]
		then
			echo "The database $DBCUT.fasta and $DBCHOP.fasta already exist."
			echo "END"
			exit 0
		fi
	fi
fi

if [ $ITSX != "no" ]
then
	ITSx -i $DB.fasta --cpu $NCPUS --multi_threads T --save_regions $ITSX --preserve T --graphical F --not_found F -o $DB
	sed -n '/^>/{s/>//;p}' $DB.$ITSX.fasta | sort | join - <(sort -k 1,1 $DB.taxonomy) | sed 's/ /\t/' > $DB.$ITSX.taxonomy
	seqkit grep -w 0 -f <(sed -n '/^>/{s/>//;p}' $DB.fasta) ${DB}_s.fasta > temp.${DB}_s.fasta
	ITSx -i temp.${DB}_s.fasta --cpu $NCPUS --multi_threads T --save_regions $ITSX --preserve T --graphical F --not_found F -o temp.${DB}_s
	seqkit grep -w 0 -f <(sed -n '/^>/{s/>//;p}' $DB.fasta | sort | join -v 1 - <(sed -n '/^>/{s/>//;p}' ${DB}_s.fasta | sort)) $DB.$ITSX.fasta | cat - temp.${DB}_s.$ITSX.fasta > ${DB}_s.$ITSX.fasta
	sed -n '/^>/{s/>//;p}' ${DB}_s.$ITSX.fasta | sort | join - <(sort -k 1,1 ${DB}_s.taxonomy) | sed 's/ /\t/' > ${DB}_s.$ITSX.taxonomy
	rm temp.${DB}_s* ${DB}*.full.fasta ${DB}*positions.txt ${DB}*summary.txt
	
	# Initialize mothur database for singleton including version
	seqkit head $DBFOLD/${DB}_s.$ITSX.fasta > tmp.${DB}_s.$ITSX.fasta
	mothur "#set.dir(output=$DBFOLD, tempdefault=$DBFOLD);
	set.logfile(name=mothur.initialize.logfile, append=T);
	classify.seqs(fasta=tmp.${DB}_s.$ITSX.fasta, template=${DB}_s.$ITSX.fasta, taxonomy=${DB}_s.$ITSX.taxonomy, cutoff=80, method=wang)"
	rm tmp.${DB}_s*
	
	# Format to vsearch udb database for singleton including version
	sed '$!N;/>/s/\n/ /;s/>//' ${DB}_s.$ITSX.fasta | sort -k 1,1 | join - <(sort -k 1,1 ${DB}_s.$ITSX.taxonomy) | sed 's/;$//;s/;/,/g' | awk '{print ">"$1";tax="$3";\n"$2}' > vsearch.${DB}_s.$ITSX.fasta
	vsearch --makeudb_usearch vsearch.${DB}_s.$ITSX.fasta --output ${DB}_s.$ITSX.udb
	rm vsearch.${DB}_s.$ITSX.fasta
elif [[ $DB =~ [Ss][Ii][Ll][Vv][Aa] ]]
then
	# Primers
	unset PRIMER
	declare -A PRIMER
	if [ $TECH == "454" ] && [ $FLIP == "true" ]
	then
		read FWD RVS <<<"$RVS $FWD"
		read FWD_NAME RVS_NAME <<<"$RVS_NAME $FWD_NAME"
	fi
	PRIMER[$FWD_NAME]=${FWD^^}
	PRIMER[$RVS_NAME]=${RVS^^}
	PRIMER[$FWD_NAME.rc]=`echo -e ">a\n${PRIMER[$FWD_NAME]}" | seqkit seq -rp -t dna -v | tail -1`
	PRIMER[$RVS_NAME.rc]=`echo -e ">a\n${PRIMER[$RVS_NAME]}" | seqkit seq -rp -t dna -v | tail -1`
	echo "Used primers are:"
	cat <(echo ${!PRIMER[@]}) <(echo ${PRIMER[@]}) | column -t
	
	
	# Modified primer with IUPAC
	declare -A PRIMER_I
	for i in "${!PRIMER[@]}"
	do
		TMP=`echo ${PRIMER[$i]} | sed 's/\(.\)/\1-*/g;s/-\*$//'`
		while read A B
		do
			TMP=`echo $TMP | sed "s/$A/$B/g"`
		done < $BIN/IUPAC.txt
		PRIMER_I[$i]=$TMP
	done
	echo "Used primers with IUPAC and gap allowed"
	cat <(echo ${!PRIMER_I[@]}) <(echo ${PRIMER_I[@]}) | column -t
	
	# cutadapt for non-aligned version (number of mismatch set from config)
	mkdir $DBCUT.temp
	cd $DBCUT.temp
	FWD_E=$(awk -v P=$PDIFFS -v F=${#FWD} 'BEGIN{printf "%.2f",P/F+0.005}')
	RVS_E=$(awk -v P=$PDIFFS -v F=${#RVS} 'BEGIN{printf "%.2f",P/F+0.005}')
	cutadapt -j $NCPUS -g "${FWD};e=${FWD_E};o=$((${#FWD}-2))...${PRIMER[$RVS_NAME.rc]};e=${RVS_E};o=$((${#RVS}-2))" --no-indels --trimmed-only $DBFOLD/$DB.fasta > $DBCUT.cut.fasta 2> ../log.cutadapt.$DBCUT.txt
	
	# clean (remove sequences with n's, longer than 800 nt, with a taxonomic path with less than 3 ranks and containing the primer sequence internaly) 
	paste - - < $DBCUT.cut.fasta | sort -k 1,1 | join <(sort -k 1,1 $DBFOLD/$DB.taxonomy | sed 's/^/>/;s/;$//;s/;/|/g') - | awk '{l=split($2,a,"|");if(l>2){print $1" "$2"\n"$3}}' | seqkit seq -m $MINLEN -M 800 | seqkit grep -sr -p "^[ATCG]*$" | seqkit grep -w 0 -vsd -p $FWD -p ${PRIMER[$RVS_NAME.rc]} > $DBCUT.taxo.fasta
	
	# dereplicate with prefix option and find LCA for unique reads from different taxonomic paths; remove if LCA have less than 3 taxonomic ranks
	paste - - < $DBCUT.taxo.fasta | sort --parallel=$NCPUS -h -k 3,3 -k 2,2 -k 1,1 | awk '{if(NR==1){p=$1;t=$2;s=$3} else {l=match(s,$3);if(l==1){t=t";"$2} else {print p,t"\n"s;p=$1;t=$2;s=$3}}}END{print p,t"\n"s}' > $DBCUT.uniq.fasta
	#  | seqkit grep -nr -p ";"
	grep "^>" $DBCUT.uniq.fasta | sed "s/'//g;s/: *[0-9][0-9]*//g;s/;/\n/g" > taxo.list
	
	# at ranks four for eukaryotes but need rank 2 for bacteria!!
	declare -A MAX_RANKS
	while read taxo rank
	do
		MAX_RANKS[$taxo]=$rank
	done < <(grep -v "^>"  taxo.list | sort -t '|' -k 4,4 | awk '{len=split($1,a,"|"); if(NR==1){prev=a[4];max=len} else {if(a[4]==prev){if(max<len){max=len}} else {print prev,max;prev=a[4];max=len}}}END{print prev,max}' | sed 's/^[^ ]*://')
	
	lca () { awk '{for(i=1;i<=NF;i++){a[NR,i]=$i}} END {for(i=1;i<=NF;i++){sum=0;split("",b);for(j=1;j<=NR;j++){sum+=!b[a[j,i]]++};if(sum==1){printf "%s|", a[1,i]} else break}}' | sed 's/|[| ]*$/\n/' ; }
	export -f lca
	
	lca_ck () {
		while read -a line
		do
			if [ ${#line[@]} -gt 2 ]
			then
				LCA=$(echo ${line[@]} | tr " " "\n" | sed '1d;s/|/ /g' | lca)
				TAXO=$LCA
				RANKS=$(echo ${TAXO//|/ } | wc -w)
				FLAG="yes"
			else
				TAXO=${line[1]}
				RANKS=$(echo ${TAXO//|/ } | wc -w)
				FLAG="no"
				RANK4=$(echo $TAXO | cut -d "|" -f 4 | sed 's/^[^ ]*://')
				if [ $RANKS -gt 6 ] && [ $RANKS -ge $(( ${MAX_RANKS[$RANK4]} - 2 )) ]
				then
					LCA=${TAXO%|*}
				else
					LCA=$TAXO
				fi
			fi
			if [ $RANKS -ge 2 ]
			then
				CKS=($(echo $LCA | cksum))
				echo "${line[0]} ranks=${RANKS}; taxo=${TAXO}; cksum=${CKS[0]}; lca=${FLAG};"
			fi
		done < <(awk '{if(NR==1){printf "%s %s",$1,$2} else {if($1~"^>"){printf "\n%s %s",$1,$2} else printf " %s",$1}}END{printf "\n"}' $@)
	}
	export -f lca_ck
	cat taxo.list | parallel -j $NCPUS --block 100k --recstart '>' --pipe -k lca_ck {} > taxo.ck.list
	sed 's/^.*\(cksum=[0-9]*;\).*$/\1/' taxo.ck.list | sort | uniq -c | awk '{print $2" size="$1";"}' | sort -k 1,1 | join -2 4 - <(sort -k 4,4 taxo.ck.list) | sort -k 3,3 | join -1 3 - <(awk '{if($1~"^>"){printf "%s", $1} else printf " %s\n", $1}' $DBCUT.taxo.fasta | sort -k 1,1) | awk '{print $1,$2,$3,$4,$5,$6"\n"$7}' > $DBCUT.uniq_ck.fasta
	
	# split based on sequences sharing same taxonomic path (full path if less than 7 ranks and less than x ranks, x being the maximum number of ranks inside a phylum, else last rank (~ species level) removed from full path)
	seqkit split -j $NCPUS --quiet -O $DBCUT.preclust --by-id --id-regexp "cksum=([0-9]+);" $DBCUT.uniq_ck.fasta
	
	# no preclustering for taxonomic path with only one sequence
	seqkit stat -j $NCPUS $DBCUT.preclust/$DBCUT.uniq_ck.part_*.fasta > $DBCUT.stat
	cat $(awk 'NR>1 && $4==1{print $1}' $DBCUT.stat) > $DBCUT.end.fasta && rm $(awk 'NR>1 && $4==1{print $1}' $DBCUT.stat)
	
	# precluster sequences with same taxonomic path (99 % similarity, longest read as reference)
	get_preclust() {
		file=$1
		seqkit seq -i $file | seqkit sort --quiet -l | sumaclust -t 0.99 -f -O ${file%.*}.names 2> /dev/null
	}
	export -f get_preclust
	awk 'NR>1 && $4>1{print $1}' $DBCUT.stat | parallel -j $NCPUS get_preclust
	
	# compute LCA for preclustered reads when needed
	awk -F"\t" 'NF>2{for(i=2;i<=NF;i++){print $1,">"$2}}' $DBCUT.preclust/*.names | sort -k 2,2 | join -1 2 - <(sort -k 1,1 taxo.ck.list) | sed 's/>[^ ]* \([^ ]*\) .*taxo=\([^;]*\);.*$/>\1 \2/' | sort -k1,1 | awk '{if(NR==1){prev=$1;print $1"\n"$2} else {if($1==prev){print $2} else {prev=$1;print $1"\n"$2}}}' > preclust.list
	cat preclust.list | parallel -j $NCPUS --block 100k --recstart '>' --pipe -k lca_ck {} | sed 's/$/ preclust=yes;/' > preclust.ck.list
	cat $DBCUT.preclust/*fasta | seqkit grep -f <(awk -F'\t' 'NF==2{print $1}' $DBCUT.preclust/*names) | sed '/^>/s/$/ preclust:no;/' | cat - <(cat $DBCUT.preclust/*fasta | seqkit grep -f <(awk '{sub(">","",$1);print $1}' preclust.ck.list) | awk '{if(NR==1){printf "%s ",$1} else {if($1~"^>"){printf "\n%s ",$1} else printf "%s",$1}}END{printf "\n"}' | sort -k 1,1 | paste - preclust.ck.list | awk '{printf "%s",$1;for(i=4;i<=NF;i++){printf " %s",$i};printf "\n%s\n",$2}') >> $DBCUT.end.fasta
	rm -r $DBCUT.preclust
	
	# final DB
	awk '{if(NR==1){printf "%s\n",$1} else {if($1~"^>"){printf "\n%s\n",$1} else printf "%s",toupper($1)}}END{printf "\n"}' $DBCUT.end.fasta > $DBFOLD/$DBCUT.fasta
	sed -n 's/^>\([^ ]*\) .*taxo=\([^;]*;\).*$/\1\t\2/;s/|/;/gp;s/(\(.*\))/|\1|/g' $DBCUT.end.fasta > $DBFOLD/$DBCUT.taxonomy
	cd .. && rm -r $DBCUT.temp
	
	# Cut align database
	if [ -f $DBFOLD/$DBALIGN.fasta ]
	then
		CUT_POS_F=$(seqkit grep -sr -p "${PRIMER_I[$FWD_NAME]}.*${PRIMER_I[$RVS_NAME.rc]}" silva_lsu_138.1.gb.align.fasta | seqkit head -n 50 | seqkit locate -rP -p ${PRIMER_I[$FWD_NAME]} | sed '1d' | cut -f 6 | sort | uniq -c | sort -k 1,1nr | awk '{print $2+1}')
		CUT_POS_R=$(seqkit grep -sr -p "${PRIMER_I[$FWD_NAME]}.*${PRIMER_I[$RVS_NAME.rc]}" silva_lsu_138.1.gb.align.fasta | seqkit head -n 50 | seqkit locate -rP -p ${PRIMER_I[$RVS_NAME.rc]} | sed '1d' | cut -f 5 | sort | uniq -c | sort -k 1,1nr | awk '{print $2-1}')
		seqkit grep -f <(cut -f 1 $DBFOLD/$DBCUT.taxonomy) $DBFOLD/$DBALIGN.fasta | seqkit subseq -r ${CUT_POS_F}:${CUT_POS_R} | goalign clean sites -c 1 -i - > $DBFOLD/$DBCHOP.fasta
	else
		echo "The align version of the database $DB was not found (expected directory: $DBFOLD , expected file name: $DBALIGN.fasta)."
	fi
else
	RVS_RC=$(echo -e ">a\n$RVS" | seqkit seq -prv -t dna | tail -1)
	mkdir $DBCUT.temp && cd $DBCUT.temp
	FWD_E=$(awk -v P=$PDIFFS -v F=${#FWD} 'BEGIN{printf "%.2f",P/F+0.005}')
	RVS_E=$(awk -v P=$PDIFFS -v F=${#RVS} 'BEGIN{printf "%.2f",P/F+0.005}')
	# cut and avoid sequences with n's
	cutadapt -j $NCPUS -g "${FWD};e=${FWD_E};o=$((${#FWD}-2))...${RVS_RC};e=${RVS_E};o=$((${#RVS}-2))" --no-indels --trimmed-only --max-n 0 -m $MINLEN -M 800 ../$DB.fasta > $DBCUT.cut.fasta 2> ../log.cutadapt.$DBCUT.txt
	# clean: remove sequences with a taxonomic path with less than 3 ranks and containing the primer sequence internaly
	PRIMER_REG=$(for i in $FWD $RVS_RC; do TMP=$(awk -v I=$i 'BEGIN{print I}') ; while read A B; do TMP=`echo $TMP | sed "s/$A/$B/g"` ; done < $BIN/IUPAC.txt ; echo $TMP ; done)
	seqkit fx2tab $DBCUT.cut.fasta | sort -k 1,1 | join <(sort -k 1,1 $DBFOLD/$DB.taxonomy | sed 's/;$//;s/ /_/g') - | awk '{rank=split($2,a,";"); if(rank>=3){print ">"$1"\t"$2"\n"$3}}' | seqkit grep -svr -w 0 -p $(echo $PRIMER_REG | sed 's/ /,/g') | seqkit fx2tab | sort -k 2,2 -t $'\t' | awk '{if($2==prev){print ">"$1"\n"$3} else {print "#>"$1"\n"$3;prev=$2}}' > $DBCUT.taxo.fasth
	# For each taxonomic path with more than a sequence, dereplicate and keep only the seed
	clust() {
		cat /dev/stdin | parallel --recstart "#" --remove-rec-sep --pipe -N1 "cat | vsearch --derep_fulllength - --sizeout --quiet --output seed.$1.{#}" 
		cat seed.$1.* > seed.$1
		rm seed.$1.*
	}
	export -f clust
	cat $DBCUT.taxo.fasth | parallel -j $NCPUS --block 1M --recstart "#" --pipe clust {#} {}
	seqkit seq -w 0 seed.* | sed '/>/s/;.*$//' > ../$DBCUT.fasta
	grep ">" ../$DBCUT.fasta | sed 's/^>//' | nl | sort -k 2,2 | join -1 2 - <(sort -k 1,1 ../$DB.taxonomy | sed 's/ /_/g') | sort -k 2,2n | cut -d " " -f 1,3 | tr " " "\t" > ../$DBCUT.taxonomy
	cd .. && rm -r $DBCUT.temp
fi

# Initialize mothur database
cd $DBFOLD
seqkit head $DBCUT.fasta > tmp.$DBCUT.fasta
mothur "#set.dir(output=$DBFOLD, tempdefault=$DBFOLD);
set.logfile(name=mothur.initialize.logfile, append=T);
classify.seqs(fasta=tmp.$DBCUT.fasta, template=$DBCUT.fasta, taxonomy=$DBCUT.taxonomy, cutoff=80, method=wang, processors=$NCPUS)"
rm tmp.$DBCUT*

# Format to vsearch udb database
sed '$!N;/>/s/\n/ /;s/>//' $DBCUT.fasta | sort -k 1,1 | join - <(sort -k 1,1 $DBCUT.taxonomy) | sed 's/;$//;s/;/,/g' | awk '{print ">"$1";tax="$3";\n"$2}' > vsearch.$DBCUT.fasta
vsearch --makeudb_usearch vsearch.$DBCUT.fasta --output $DBCUT.udb
rm vsearch.$DBCUT.fasta

# change permissions
find $DBFOLD -maxdepth 1 -type f -name "${DBCUT%.*}*" -exec chmod 664 {} +

echo END
