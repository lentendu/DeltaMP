# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/prev.txt
if [ $REF_SUBPROJECT != "no" ]
then
	. $BIN/check_previous_step
fi

# Set archives/libraries array
if [ $TECH == "454" ] || [ $TECH == "Pacbio" ]
then
	ARCH=(`cat config/lib1.list`)
elif [ $TECH == "Illumina" ]
then
	ARCH=(`awk '{print $1$2"\n"$1$3}' config/lib1.list`)
elif [ $TECH == "Nanopore" ]
then
	ARCH=($(for i in $(cat config/lib1.list); do ls ${LIB_DIR}/$i/*${RAW_EXT}* | sed "s|${LIB_DIR}/||" ; done))
fi

# extract, symlink or download raw data
cd libraries

if [[ $LIB_DIR == "/"* ]]
then
	# Extract group of libraries compressed together if any
	if [[ "${ARCHIVES[@]}" != "no" ]]
	then
		my_extract() {
			dir=$1
			arch=$2
			if [[ -f "$dir/$arch" ]]
			then
				ln -s $dir/$arch $arch
				if [[ "$arch" != *$RAW_EXT ]]
				then
					mkdir tmp.$arch
					case $arch in
						*.tar.bz2) tar xjvf $arch -C tmp.$arch ;;
						*.tar.gz) tar xzvf $arch -C tmp.$arch ;;
						*.bz2) bunzip2 -1 $arch ;;
						*.gz) dd if=$arch ibs=1M | unpigz -p 1 | dd of=${@%.*} obs=1M && rm $arch ;;
						*.tar) tar xf $arch -C tmp.$arch ;;
						*.tbz2) tar xjvf $arch -C tmp.$arch ;;
						*.tgz) tar xzvf $arch -C tmp.$arch ;;
						*.zip) unzip -j $arch ;;
						#*.7z) 7za e -o./tmp.$arch $arch && rm $arch;;
						*) echo "ERROR: '$arch' cannot be extracted, unknown extension" && exit 100 ;;
					esac
					find ./tmp.$arch -type f -exec mv -i {} . \;
					rm -r ./tmp.$arch
				fi
			else
				echo "ERROR: $dir/$arch does not exist or is not a file" && exit 100
			fi
		}
		export -f my_extract
		export RAW_EXT
		parallel -j $NCPUS my_extract ::: ${LIB_DIR} ::: ${ARCHIVES[@]}
	else
		if [ $TECH == "Nanopore" ]
		then
			mkdir $(printf "%s\n" ${ARCH[@]%/*} | sort -u)
		fi
		parallel -j $NCPUS 'if [ -f {1}/{2} ]; then ln -s {1}/{2} {2} ; fi' ::: ${LIB_DIR[@]} ::: ${ARCH[@]}
	fi
else
	wget -nv -O $LIB_DIR.txt "https://www.ebi.ac.uk/ena/portal/api/filereport?accession=$LIB_DIR&result=read_run&fields=all&format=tsv&download=true"
	if [ "$(sed -n '$=' $LIB_DIR.txt)" -gt 1 ]
	then
		if [ ${ARCH[0]%%.*} == "ftp" ]
		then
			parallel -j $NCPUS 'wget -nv -O - {} | dd of=$(basename {}) bs=1M' ::: ${ARCH[@]}
		elif [ ${ARCH[0]%%.*} == "fasp" ]
		then
			ASPERA_DIR=$(dirname $(which ascp) | sed 's@/bin$@@')
			parallel -j $NCPUS "ascp -QT -l 300m -P33001 -i ${ASPERA_DIR}/etc/asperaweb_id_dsa.openssh era-fasp@{} ./" ::: ${ARCH[@]}
		fi
		ARCH=($(basename -a ${ARCH[@]}))
	else
		echo "The accession $LIB_DIR was not found at the European Nucleotide Archive (http://www.ebi.ac.uk/ena/data)"
		echo "Aborting"
		exit 100
	fi
fi


# Extract individual libraries only if not uniformly compressed to gz or bz2, then re-compress uniformly to gz if needed
if [ ${#COMP_EXT[@]} -eq 1 ] && [[ "gz bz2" == *${COMP_EXT[0]}* ]]
then
	:
elif [ ${#COMP_EXT[@]} -gt 0 ]
then
	my_extract2() {
		case $@ in
			*.bz2) bunzip2 -1 $@ ;;
			*.gz) dd if=$@ ibs=1M | unpigz -p 1 | dd of=${@%.*} obs=1M && rm $@ ;;
			*.tar) tar xf $@ ;;
			*.zip) unzip $@ ;;
		esac
	}
	export -f my_extract2
	parallel -j $NCPUS my_extract2 ::: ${ARCH[@]}
	parallel -j $NCPUS pigz -p 1 -b 1024 ::: ${ARCH[@]%.*}
else
	parallel -j $NCPUS pigz -p 1 -b 1024 ::: ${ARCH[@]}
fi


# Oligo files
mkdir $RAW_EXT raw_stat fasta
if [ $TECH == "454" ]
then
	cat <(echo "forward $FWD") <(echo "reverse $RVS") > fasta/oligos.$FWD_NAME.$RVS_NAME
fi
if [ $BARC_ANCH == "yes" ] ; then BANCH="^" ; else BANCH="X" ; fi
while read lib fwd rvs
do
	if [[ $LIB_DIR == "/"* ]]
	then
		j=${lib/.$RAW_EXT*/}
	else
		j=`echo ${lib##*/} | sed 's/\.'$RAW_EXT'.*//'`
	fi
	if [ $TECH == "454" ]
	then
		awk -v I=$lib 'BEGIN{OFS="\t"}$3==I{print "barcode",$1,$2}' $EXEC/config/barcodes.txt | cat fasta/oligos.$FWD_NAME.$RVS_NAME - | sed 's/reverse/#reverse/' > fasta/oligos.$j
	elif [ $TECH == "Illumina" ]
	then
		if [ -z $DUALID ]
		then
			awk -v I=$(echo "$lib$fwd") -v B="$BANCH" '$3==I{print ">"$2"\n"B$1}' $EXEC/config/barcodes.txt > fastq/oligos.$j
		else
			awk -v I=$(echo "$lib$fwd") '$3==I{split($1,a,",");print a[1]}' $EXEC/config/barcodes.txt | sort -u | awk -v B="$BANCH" '{print ">F"NR"\n"B$1}' > fastq/oligos.F.$j
			awk -v I=$(echo "$lib$fwd") '$3==I{split($1,a,",");print a[2]}' $EXEC/config/barcodes.txt | sort -u | awk -v B="$BANCH" '{print ">R"NR"\n"B$1}' > fastq/oligos.R.$j
		fi
	fi
done < $EXEC/config/lib1.list

# list files and directories
(. $BIN/list_step_files.sh)

echo END
