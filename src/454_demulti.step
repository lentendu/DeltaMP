# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
. $BIN/check_previous_step

#Define the library to demultiplex
LIB_NAME=`head -$ARRAY_TASK config/lib2.list | tail -1 | sed 's/\.sff//'`
cd libraries
mkdir demultiplex
cd demultiplex 
mv ../fasta/oligos.$LIB_NAME ./

#Define barcode difference allowed for the library
if [ $BDIFFS == "a" ]
then
	unset BDIFFS
	BDIFFS=`barcode_mismatch_check.sh oligos.$LIB_NAME`
	NBMID=`grep -c "barcode" oligos.$LIB_NAME`
	echo "$LIB_NAME $BDIFFS $NBMID" >> $EXEC/processing/bdiffs.$SUBPROJECT
fi

#Split library over the different samples
if [ $EXT == "bz2" ]
then
	bunzip2 -c $LIB_NAME.sff.$EXT > $LIB_NAME.sff
else
	unpigz -c -p 1 $LIB_NAME.sff.$EXT > $LIB_NAME.sff
fi
mothur "#set.dir(input=$EXEC/libraries, output=./);
sffinfo(sff=$LIB_NAME.sff)"
rm $LIB_NAME.sff

# cutadapt with 5' adaptors
BLENGTH=$(grep -m 1 barcode oligos.${LIB_NAME} | awk '{print length($2)}')
BDISS=$(awk -v L=$BLENGTH -v D=$BDIFFS 'BEGIN{printf "%.2g\n", D/L}')
if [ $BARC_ANCH == "yes" ] ; then BANCH="^" ; else BANCH="X" ; fi
awk -v B="$BANCH" '$1=="barcode"{print ">"$3"\n"B$2}' oligos.$LIB_NAME > oligos.$LIB_NAME.fasta
cutadapt -g file:oligos.${LIB_NAME}.fasta -e ${BDISS} -O $((BLENGTH-BDIFFS) --no-indels --trimmed-only -o {name}.$LIB_NAME.fasta $LIB_NAME.fasta > log_cutadapt.demultiplex.${LIB_NAME}.txt

# create list of sequences to extract from main sff and oligo file per sample
sed -n '/>/{s/>//;p}' oligos.$LIB_NAME.fasta > $LIB_NAME.groups.list
while read group
do
	mkdir $group.$LIB_NAME
	sed -n '/^>/{s/>//;s/[ \t].*//;p}' $group.$LIB_NAME.fasta > $group.$LIB_NAME/$group.$LIB_NAME.txt
	awk -v G=$group 'NR<=2{print $0} ; $3==G{print $0}' oligos.$LIB_NAME > ../fasta/oligos.$group.$LIB_NAME
done < $LIB_NAME.groups.list

# make per sample sff
parallel -a $LIB_NAME.groups.list -j $NCPUS "make_per_library_sff.py -i ../$LIB_NAME.sff -l {}.$LIB_NAME"

# compress and move demultiplexed sff in sff directory
if [ $EXT == "bz2" ]
then
	parallel -a $LIB_NAME.groups.list -j $NCPUS "bzip2 -1 -c {}.$LIB_NAME/{}.$LIB_NAME.sff > $RAW_EXT/{}.$LIB_NAME.sff.$EXT"
else
	parallel -a $LIB_NAME.groups.list -j $NCPUS "pigz -p 1 -c -b 1024 {}.$LIB_NAME/{}.$LIB_NAME.sff > ../$RAW_EXT/{}.$LIB_NAME.sff.$EXT"
fi
parallel -a $LIB_NAME.groups.list -j $NCPUS "rm -r {}.$LIB_NAME {}.$LIB_NAME.fasta"
rm $LIB_NAME.flow $LIB_NAME.qual

# list files and directories
(. $BIN/list_step_files.sh)

echo END
