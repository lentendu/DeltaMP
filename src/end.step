# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/prev.txt
. $BIN/check_previous_step

# load environment of previous step
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; if [ $REF_SUBPROJECT != "no" ] ; then declare $var=$(eval echo "$"$var | sed 's/'$REF_SUBPROJECT'/'$SUBPROJECT'/') ; fi ; done < config/id_env.txt

# OTU table
cd processing
LABELS=(all abundant all_$TARG_ORG abundant_$TARG_ORG)
if [ $CLASSIF == "bayesian" ]
then
	sed '1d' ${COUNT_OTUS}.count_table | sort -k 1,1 | join -1 2 <(cut -f 1 ${NAMES_OTUS}.names | nl -n rz -w ${#NBOTUS} | sort -k 2,2) - | sed 's/ / Otu/' | sort -k 2,2 | join -1 2 - <(sed '1d' $CTAXO.taxonomy) | awk -v L=$SAMP_SIZE '{printf "%s",$1; for(i=4;i<=L+3;i++){printf "\t%s",$i};printf "\t%s\t%s\t%s\t%s\n",$NF,$2}' | cat <(head -1 ${COUNT_OTUS}.count_table | cut -f 3- | sed 's/^/OTU\t/;s/$/\ttaxonomy\trepseq/') - > $SUBPROJECT.${LABELS[0]}_OTUs.tsv
elif [ $CLASSIF == "vsearch" ]
then
	sed '1d' ${COUNT_OTUS}.count_table | sort -k 1,1 | join -1 2 <(cut -f 1 ${NAMES_OTUS}.names | nl -n rz -w ${#NBOTUS} | sort -k 2,2) - | sed 's/ / Otu/' | sort -k 2,2 | join -1 2 - <(sed '1d' $CTAXO.taxonomy) | awk -v L=$SAMP_SIZE '{printf "%s",$1; for(i=4;i<=L+3;i++){printf "\t%s",$i};printf "\t%s\t%s\t%s\t%s\n",$(NF-2),$(NF-1),$NF,$2}' | cat <(head -1 ${COUNT_OTUS}.count_table | cut -f 3- | sed 's/^/OTU\t/;s/$/\ttaxonomy\tsimilarity\treference\trepseq/') - > $SUBPROJECT.${LABELS[0]}_OTUs.tsv
fi
awk -v M=$MIN_DOM -v S=$MIN_SAMP -v L=$SAMP_SIZE '{if(NR==1){print $0} else {seq=0;sam=0;for(i=2;i<=L+1;i++){if($i>0){seq+=$i;sam+=1}};if(seq>=M && sam>=S){print $0}}}' $SUBPROJECT.${LABELS[0]}_OTUs.tsv > $SUBPROJECT.${LABELS[1]}_OTUs.tsv
grep -P "[\t;_:]$TARG_ORG;" $SUBPROJECT.${LABELS[0]}_OTUs.tsv | cat <(sed -n '1p' $SUBPROJECT.${LABELS[0]}_OTUs.tsv) - > $SUBPROJECT.${LABELS[2]}_OTUs.tsv
grep -P "[\t;_:]$TARG_ORG;" $SUBPROJECT.${LABELS[1]}_OTUs.tsv | cat <(sed -n '1p' $SUBPROJECT.${LABELS[0]}_OTUs.tsv) - > $SUBPROJECT.${LABELS[3]}_OTUs.tsv

# retrieve BioProject sample's associated metadata
if [[ $LIB_DIR != "/"* ]]
then
	mkdir metadata && cd metadata
	awk 'BEGIN{FS="\t"} {if(NR==1){for(i=1;i<=NF;i++){if($i=="sample_alias"){s=i};if($i=="sample_accession"){a=i}}} else {print $s,$a}}' $EXEC/libraries/$LIB_DIR.txt | sort -u | join - <(sed 's/\([^\t]*\)\tftp.*$/\1/;s/.*\t//' $EXEC/config/barcodes.txt | sort) > $LIB_DIR.samples.txt
	while read sample accession
	do
		wget -nv -O $sample.xml http://www.ebi.ac.uk/ena/data/view/$accession\&display=xml
	done < $LIB_DIR.samples.txt
	grep "<TAG>" *.xml | sed 's/^.*<TAG>\([^<]*\)<\/TAG>.*$/\1/;s/\//\\\\\\\//g' | sort -u > tags.txt
	while read sample accession
	do
		TAX=$(sed -n '/TAXON_ID/{s/^.*>\([^<]*\)<.*$/\1/p;}' $sample.xml)
		SCN=$(sed -n '/SCIENTIFIC_NAME/{s/^.*>\([^<]*\)<.*$/\1/p;}' $sample.xml)
		while read tag
		do
			if grep -q ">$tag<" $sample.xml
			then
				sed -n '/>'"$tag"'</{n;s/^.*>\([^<]*\)<.*$/\1/p;}' $sample.xml | sed 's/^\([0-9]*\),\([0-9]*\)$/\1.\2/' | sed -e :a -e '$!N;s/\n/ | /;ta' -e 'P;D'
			else
				echo "NA"
			fi
		done < tags.txt | tr "\n" "\t" | sed 's/\t$//' | paste <(echo -e "$sample\t$accession\t$TAX\t$SCN") -
	done < $LIB_DIR.samples.txt | sed 's/\t/\"\t\"/g;s/$/\"/;s/\"//' | cat <(paste <(echo -e "#SampleID\tsample_accession\ttaxon_id\tscientific_name") <(tr "\n" "\t" < tags.txt | sed 's/ /_/g;s/\\//g;s/$/\n/')) - > ../$LIB_DIR.metadata.txt
	cd ..
fi

# biom format (all OTUs only)
if [ $CLASSIF == "bayesian" ]
then
	sed '/\tTaxonomy/s/^/#/;s/NA;/NA(0);/g;s/)*;\t/\t/' $SUBPROJECT.${LABELS[0]}_OTUs.tsv | awk -v S=$SAMP_SIZE 'BEGIN{FS=OFS="\t"}{if(NR==1){print $1,$NF,$(S+2),"bootstrap"} else {l=split($(S+2),a,");");tax="";boot="";for(i=1;i<=l;i++){split(a[i],b,"(");tax=tax""b[1]";";boot=boot""b[2]";"};print $1,$NF,tax,boot}}' > $CTAXO.taxo
elif [ $CLASSIF == "vsearch" ]
then
	sed '/\tTaxonomy/s/^/#/;s/NA;/NA(0);/g;s/)*;\t/\t/' $SUBPROJECT.${LABELS[0]}_OTUs.tsv | awk -v S=$SAMP_SIZE 'BEGIN{FS=OFS="\t"}{if(NR==1){print $1,$NF,$(S+2),"bootstrap",$(NF-2),$(NF-1)} else {l=split($(S+2),a,");");tax="";boot="";for(i=1;i<=l;i++){split(a[i],b,"(");tax=tax""b[1]";";boot=boot""b[2]";"};print $1,$NF,tax,boot,$(NF-2),$(NF-1)}}' > $CTAXO.taxo
fi
# Functional assignment
if [ $TARG == "ITS" ] && [ FUNCT == "yes" ]
then
	cut -f 1,3 $CTAXO.taxo | sed '1d;s/;/ /g' | awk '{for(i=2;i<=NF;i++){print $1,i,$i}}' | sort -k 3,3 | join -1 3 -o 0,1.1,1.2,2.2 -a 1 -e "NA" - <(cut -f 1,3-6 $DBFOLD/FUNGuild.tsv | sed '1d;s/ /_/g;s/\t/ /;s/\t/#/g' | sort -k 1,1) | sort -k 2,2 -k 3,3n | awk '{if(NR==1){prev=$2;printf "%s %s",prev,$4} else {if($2==prev){printf " %s",$4} else {prev=$2;printf "\n%s %s",prev,$4}}}END{printf "\n"}' | awk '{for(i=NF;i>=2;i--){if($i!="NA"){print $1,i-1,$i;break};if(i==2){print $1,"0","NA#NA#NA#NA"}}}' | join <(sed '1d' $CTAXO.taxo) - | sed 's/ /\t/g;s/#/\t/g' | cat <(paste <(head -1 $CTAXO.taxo) <(echo "functional_assignment_level") <(head -1 $DBFOLD/FUNGuild.tsv | cut -f 3-6)) - > tmp.$CTAXO
	mv tmp.$CTAXO $CTAXO.taxo
fi
biom convert -i $LIST.otu -o $LIST.json.biom  --table-type="OTU table" --to-json
if [[ $LIB_DIR != "/"* ]]
then
	while read var val; do read -a $var <<<`echo $val` ; done < <(transpose_tab $LIB_DIR.metadata.txt | sed 's/\"//g' | awk 'NR>1{sum=0;for(i=2;i<=NF;i++){if($i!=$i+0){next}};n=$1;sub("^[^\t]*\t","",$0);if($0 ~ /\./){f=f","n} else j=j","n}END{printf "FLOAT\t%s\nINTEGER\t%s\n", f,j}' | sed 's/\t,/\t/;s/,$//')
	biom add-metadata -i $LIST.json.biom -o $SUBPROJECT.json.biom --output-as-json --observation-metadata-fp $CTAXO.taxo --sample-metadata-fp $LIB_DIR.metadata.txt --sc-separated taxonomy,bootstrap ${INTEGER/#/--int-fields } ${FLOAT/#/--float-fields }
else
	biom add-metadata -i $LIST.json.biom -o $SUBPROJECT.json.biom --output-as-json --observation-metadata-fp $CTAXO.taxo --sc-separated taxonomy,bootstrap
fi
rm $LIST.json.biom

# Representative sequences
twofasta $FASTA_OTUS.fasta > $SUBPROJECT.${LABELS[0]}_repseq.fasta
obigrep --without-progress-bar --id-list=<(awk 'NR>1{print $NF}' $SUBPROJECT.${LABELS[1]}_OTUs.tsv) $SUBPROJECT.${LABELS[0]}_repseq.fasta | twofasta > $SUBPROJECT.${LABELS[1]}_repseq.fasta
obigrep --without-progress-bar --id-list=<(awk 'NR>1{print $NF}' $SUBPROJECT.${LABELS[2]}_OTUs.tsv) $SUBPROJECT.${LABELS[0]}_repseq.fasta | twofasta > $SUBPROJECT.${LABELS[2]}_repseq.fasta
obigrep --without-progress-bar --id-list=<(awk 'NR>1{print $NF}' $SUBPROJECT.${LABELS[3]}_OTUs.tsv) $SUBPROJECT.${LABELS[0]}_repseq.fasta | twofasta > $SUBPROJECT.${LABELS[3]}_repseq.fasta

# Sequences stat
for i in "${LABELS[@]}"
do
	sed '1d' $SUBPROJECT.${i}_OTUs.tsv | awk '{for(i=2;i<=(NF-2);i++){sum[i]+=$i}}END{for(i=2;i<=(NF-2);i++){print sum[i]}}' | tr "\n" "\t" | sed 's/$/\n/'
done | cat <(sed -n '1p' $SUBPROJECT.all_OTUs.tsv | sed 's/^OTU\t//;s/\ttaxonomy\trepseq//') - | transpose | sort -k 1,1 | mimato | cat <(echo ${LABELS[@]} | sed 's/ /_OTUs /g;s/$/_OTUs/;s/^/Sample /') - | tr " " "\t" | sed '/^Sample/s/_/ /g' | cut -f 2- | paste ../quality_check/$SUBPROJECT.summary.stat.tsv - > $SUBPROJECT.read_counts.tsv

# Copy to output folders
OUT_LIST=(`ls $SUBPROJECT.* | grep "tsv$\|repseq\|biom$"`)
PROC_LIST=(`ls $SUBPROJECT.* | join -v 1 - <(echo ${OUT_LIST[@]} | tr " " "\n")`)

for i in "${OUT_LIST[@]}"; do dd if=$i of=../archives/$SUBPROJECT.outputs/$i bs=1M ; done
for i in "${PROC_LIST[@]}"; do dd if=$i of=../archives/$SUBPROJECT.processing/$i bs=1M ; done

# logs
cd $EXEC/log
LOGS=(`ls -tr | awk 'BEGIN{FS="."} {if(NR==1){prev=$1;i=1} else{if(prev!=$1){prev=$1;i=i+1}};if(NF==2){print i,$1,"x",$2} else {print i,$1,$2,$3}}' | sort -k 1,1n -k 5,5r -k 4,4n | sed 's/ x / /' | cut -d " " -f 2- | tr " " "."`)
for log in "${LOGS[@]}"
do
	log_split=(${log//./ })
	if [ ${#log_split[@]} -eq 2 ] || [ ${log_split[1]} -eq 1 ]
	then
		TEXT="${log%%.*} standard ${log##*.}"
		printf '%.0s#' $(seq 1 $((12+${#TEXT}))) | sed 's/$/\n/'
		echo "##### $TEXT #####"
		printf '%.0s#' $(seq 1 $((12+${#TEXT}))) | sed 's/$/\n/'
		grep -v $'\r' $log
	else
		sed '/^mothur v\./,/to exit program/d' $log | grep -v $'\r' | sed '/^$/N;/\n$/N;//D'
	fi
done > ../archives/$SUBPROJECT.outputs/$SUBPROJECT.log

# List files
. $BIN/list_step_files.sh

echo END
