# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# load modules
module load DeltaMP/DELTAMP_VERSION

# Define Variables
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/env.txt
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; done < config/prev.txt
. $BIN/check_previous_step

# load environment of previous step
while read var val; do unset $var ; if [[ $val == "(["* ]]; then declare -A $var="`echo $val | sed 's/].\"/]=\"/g'`" ; else declare $var="$val" ; fi ; if [ $REF_SUBPROJECT != "no" ] ; then declare $var=$(eval echo "$"$var | sed 's/'$REF_SUBPROJECT'/'$SUBPROJECT'/') ; fi ; done < config/id_env.txt

# OTU/ASV table
cd processing
LABELS=(all abundant all_$TARG_ORG abundant_$TARG_ORG)
FSAMP_SIZE=$(awk 'BEGIN{FS="\t"}NR==1{print NF-2}' ${COUNT_OTUS}.count_table)
if [ $ASV == "yes" ] ; then SUFF=ASV ; else SUFF=OTU ; fi
if [ $CLASSIF == "bayesian" ]
then
	sed '1d' ${COUNT_OTUS}.count_table | cut -f 1,3- | sort -t $'\t' -k 1,1 | join -t $'\t' -2 5 - <(sed '1d' $CTAXO.taxonomy | nl -n ln | sort -k 5,5) | sort -k $((FSAMP_SIZE+2)),$((FSAMP_SIZE+2)) | awk -v L=$FSAMP_SIZE 'BEGIN{FS="\t"}{printf "%s",$(L+3);for(i=2;i<=L+1;i++){printf "\t%s",$i};printf "\t%s\t%s\t%s\n", $(L+4),$(L+5),$1}' | sort -t $'\t' -k 1,1 | cat <(head -1 ${COUNT_OTUS}.count_table | cut -f 3- | sed 's/^/'$SUFF'\t/;s/$/\ttotal\ttaxonomy\trepseq/') - > $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv
elif [ $CLASSIF == "vsearch" ]
then
	sed '1d' ${COUNT_OTUS}.count_table | cut -f 1,3- | sort -t $'\t' -k 1,1 | join -t $'\t' -2 7 - <(sed '1d' $CTAXO.taxonomy | nl -n ln | sort -t $'\t' -k 7,7) | sort -k $((FSAMP_SIZE+2)),$((FSAMP_SIZE+2)) | awk -v L=$FSAMP_SIZE 'BEGIN{FS="\t"}{printf "%s",$(L+3);for(i=2;i<=L+1;i++){printf "\t%s",$i};printf "\t%s\t%s\t%s\t%s\t%s\n", $(L+4),$(L+5),$(L+6),$(L+7),$1}' | sort -k 1,1 | cat <(head -1 ${COUNT_OTUS}.count_table | cut -f 3- | sed 's/^/'$SUFF'\t/;s/$/\ttotal\ttaxonomy\tsimilarity\treference\trepseq/') - > $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv
fi
if [[ $TARG_ORG =~ [Pp]rotist[as]* ]]
then
	grep -P "[\t;_:]Eukaryota[()0-9]*;" $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv | grep -v ";Fungi[()0-9]*;\|;Streptophyta[()0-9]*;\|;Metazoa[()0-9]*;" | cat <(sed -n '1p' $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv) - > $SUBPROJECT.${LABELS[2]}_${SUFF}s.tsv
else
	grep -P "[\t;_:]$TARG_ORG[()0-9]*;" $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv | cat <(sed -n '1p' $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv) - > $SUBPROJECT.${LABELS[2]}_${SUFF}s.tsv
fi
for i in 0 2
do
	awk -v M=$MIN_DOM -v S=$MIN_SAMP -v L=$FSAMP_SIZE '{if(NR==1){print $0} else {seq=0;sam=0;for(i=2;i<=L+1;i++){if($i>0){seq+=$i;sam+=1}};if(seq>=M && sam>=S){print $0}}}' $SUBPROJECT.${LABELS[$i]}_${SUFF}s.tsv > $SUBPROJECT.${LABELS[$((i+1))]}_${SUFF}s.tsv
done

# retrieve BioProject sample's associated metadata
if [[ $LIB_DIR != "/"* ]]
then
	mkdir metadata && cd metadata
	awk 'BEGIN{FS="\t"} {if(NR==1){for(i=1;i<=NF;i++){if($i=="sample_alias"){s=i};if($i=="sample_accession"){a=i}}} else {print $s,$a}}' $EXEC/libraries/$LIB_DIR.txt | sort -k 1,1 -u | join - <(sed 's/\([^\t]*\)\tftp.*$/\1/;s/.*\t//' $EXEC/config/barcodes.txt | sort -k 1,1 -u) > $LIB_DIR.samples.txt
	while read sample accession
	do
		wget -nv -O $sample.xml http://www.ebi.ac.uk/ena/data/view/$accession\&display=xml
	done < $LIB_DIR.samples.txt
	grep "<TAG>" *.xml | sed 's/^.*<TAG>\([^<]*\)<\/TAG>.*$/\1/;s/\//\\\\\\\//g' | sort -u > tags.txt
	while read sample accession
	do
		TAX=$(sed -n '/TAXON_ID/{s/^.*>\([^<]*\)<.*$/\1/p;}' $sample.xml)
		SCN=$(sed -n '/SCIENTIFIC_NAME/{s/^.*>\([^<]*\)<.*$/\1/p;}' $sample.xml)
		while read tag
		do
			if grep -q ">$tag<" $sample.xml
			then
				sed -n '/>'"$tag"'</{n;s/^.*>\([^<]*\)<.*$/\1/p;}' $sample.xml | sed 's/^\([0-9]*\),\([0-9]*\)$/\1.\2/' | sed -e :a -e '$!N;s/\n/ | /;ta' -e 'P;D'
			else
				echo "NA"
			fi
		done < tags.txt | tr "\n" "\t" | sed 's/\t$//' | paste <(echo -e "$sample\t$accession\t$TAX\t$SCN") -
	done < $LIB_DIR.samples.txt | sed 's/\t/\"\t\"/g;s/$/\"/;s/\"//' | cat <(paste <(echo -e "#SampleID\tsample_accession\ttaxon_id\tscientific_name") <(tr "\n" "\t" < tags.txt | sed 's/ /_/g;s/\\//g;s/$/\n/')) - > ../$LIB_DIR.metadata.txt
	cd ..
fi

# biom format (all OTUs/ASVs only)
if [ $CLASSIF == "bayesian" ]
then
	sed 's/^\('$SUFF'\t\)/#\1/;s/NA;/NA(0);/g;s/)*;\t/\t/;s/);/|/g;s/(/##/g' $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv | awk -v S=$FSAMP_SIZE 'BEGIN{FS=OFS="\t"}{if(NR==1){print $1,$NF,$(S+3),"bootstrap",$(S+2)} else {l=split($(S+3),a,"|");tax="";boot="";for(i=1;i<=l;i++){split(a[i],b,"##");tax=tax""b[1]";";boot=boot""b[2]";"};print $1,$NF,tax,boot,$(S+2)}}' | sed 's/;\t/\t/;s/;$//' > $CTAXO.taxo
elif [ $CLASSIF == "vsearch" ]
then
	sed 's/^\('$SUFF'\t\)/#\1/;s/NA;/NA(0);/g;s/)*;\t/\t/;s/);/|/g;s/(/##/g' $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv | awk -v S=$FSAMP_SIZE 'BEGIN{FS=OFS="\t"}{if(NR==1){print $1,$NF,$(S+3),"bootstrap",$(S+2),$(NF-2),$(NF-1)} else {l=split($(S+3),a,"|");tax="";boot="";for(i=1;i<=l;i++){split(a[i],b,"##");tax=tax""b[1]";";boot=boot""b[2]";"};print $1,$NF,tax,boot,$(S+2),$(NF-2),$(NF-1)}}' | sed 's/;\t/\t/g' > $CTAXO.taxo
fi

# Functional assignment
if [ $TARG == "ITS" ] && [ FUNCT == "yes" ]
then
	cut -f 1,3 $CTAXO.taxo | sed '1d;s/;/ /g' | awk '{for(i=2;i<=NF;i++){print $1,i,$i}}' | sort -k 3,3 | join -1 3 -o 0,1.1,1.2,2.2 -a 1 -e "NA" - <(cut -f 1,3-6 $DBFOLD/FUNGuild.tsv | sed '1d;s/ /_/g;s/\t/ /;s/\t/#/g' | sort -k 1,1) | sort -k 2,2 -k 3,3n | awk '{if(NR==1){prev=$2;printf "%s %s",prev,$4} else {if($2==prev){printf " %s",$4} else {prev=$2;printf "\n%s %s",prev,$4}}}END{printf "\n"}' | awk '{for(i=NF;i>=2;i--){if($i!="NA"){print $1,i-1,$i;break};if(i==2){print $1,"0","NA#NA#NA#NA"}}}' | join <(sed '1d' $CTAXO.taxo) - | sed 's/ /\t/g;s/#/\t/g' | cat <(paste <(head -1 $CTAXO.taxo) <(echo "functional_assignment_level") <(head -1 $DBFOLD/FUNGuild.tsv | cut -f 3-6)) - > tmp.$CTAXO
	mv tmp.$CTAXO $CTAXO.taxo
fi

cut -f 1-$((FSAMP_SIZE + 1)) $SUBPROJECT.${LABELS[0]}_${SUFF}s.tsv > $CTAXO.otu
biom convert -i $CTAXO.otu -o $CTAXO.json.biom  --table-type="OTU table" --to-json

if [[ $LIB_DIR != "/"* ]]
then
	while read var val; do read -a $var <<<`echo $val` ; done < <(transpose_tab $LIB_DIR.metadata.txt | sed 's/\"//g' | awk 'NR>1{sum=0;for(i=2;i<=NF;i++){if($i!=$i+0){next}};n=$1;sub("^[^\t]*\t","",$0);if($0 ~ /\./){f=f","n} else j=j","n}END{printf "FLOAT\t%s\nINTEGER\t%s\n", f,j}' | sed 's/\t,/\t/;s/,$//')
	biom add-metadata -i $CTAXO.json.biom -o $SUBPROJECT.json.biom --output-as-json --observation-metadata-fp $CTAXO.taxo --sample-metadata-fp $LIB_DIR.metadata.txt --sc-separated taxonomy,bootstrap ${INTEGER/#/--int-fields } ${FLOAT/#/--float-fields }
else
	biom add-metadata -i $CTAXO.json.biom -o $SUBPROJECT.json.biom --output-as-json --observation-metadata-fp $CTAXO.taxo --sc-separated taxonomy,bootstrap
fi
rm $CTAXO.taxo $CTAXO.otu $CTAXO.json.biom

# Representative sequences
seqkit seq -w 0 $FASTA_OTUS.fasta > $SUBPROJECT.${LABELS[0]}_repseq.fasta
seqkit grep -w 0 -f <(awk 'NR>1{print $NF}' $SUBPROJECT.${LABELS[1]}_${SUFF}s.tsv) $SUBPROJECT.${LABELS[0]}_repseq.fasta > $SUBPROJECT.${LABELS[1]}_repseq.fasta
seqkit grep -w 0 -f <(awk 'NR>1{print $NF}' $SUBPROJECT.${LABELS[2]}_${SUFF}s.tsv) $SUBPROJECT.${LABELS[0]}_repseq.fasta > $SUBPROJECT.${LABELS[2]}_repseq.fasta
seqkit grep -w 0 -f <(awk 'NR>1{print $NF}' $SUBPROJECT.${LABELS[3]}_${SUFF}s.tsv) $SUBPROJECT.${LABELS[0]}_repseq.fasta > $SUBPROJECT.${LABELS[3]}_repseq.fasta

# Sequences stat
for i in "${LABELS[@]}"
do
	awk -v L=$FSAMP_SIZE -v I=$i '{for(i=2;i<=(L+1);i++){if(NR==1){sam[i]=$i} else {sum[i]+=$i}}}END{for(i=2;i<=(L+1);i++){print I,sam[i],sum[i]}}' $SUBPROJECT.${i}_${SUFF}s.tsv
done | awk -v H=$(echo ${LABELS[@]} | sed 's/ /#/g') -v S=$(cut -f 1 ../config/lib4.list | awk '{if(NR==1){printf "%s",$1} else printf "#@%s",$1}END{printf "\n"}') 'BEGIN{ls=split(S,sa,"#@"); lh=split(H,he,"#")} {c[$1$2]=$3} END{gsub("#","\t",H); print "Sample\t"H; for(i=1;i<=ls;i++){printf "%s", sa[i]; for(j=1;j<=lh;j++){if(he[j]sa[i] in c){out=c[he[j]sa[i]]} else out=0; printf "\t%s",out}; printf "\n"} }' | mimato -h > tmp.read_counts.tsv
if [ $CLUST == "dada2" ]
then
	join -a 1 -1 2 -t $'\t' <(cut -f 1 ../config/lib4.list | cat <(echo sample) - | nl -n ln | sed 's/[ \t][ \t]*/\t/' | sort -k 2,2) <(sort -k 1,1 $SUBPROJECT.dada2.read_counts.tsv) | sort -k 2,2n | cut -f 1,3- |  awk -F'\t' 'NR==1{l=NF};{if(NF==l){print $0} else {printf "%s",$1;for(i=2;i<=l;i++){printf "\t0"};printf "\n"}}' | mimato -h | paste - <(cut -f 2- tmp.read_counts.tsv) | cut -f 2- | paste ../quality_check/$SUBPROJECT.summary.stat.tsv - > $SUBPROJECT.read_counts.tsv
else
	cut -f 2- tmp.read_counts.tsv | paste ../quality_check/$SUBPROJECT.summary.stat.tsv - > $SUBPROJECT.read_counts.tsv
fi
rm tmp.read_counts.tsv

# Copy to output folders
OUT_LIST=(`ls $SUBPROJECT.* | grep "tsv$\|repseq\|biom$"`)
PROC_LIST=(`ls $SUBPROJECT.* | join -v 1 - <(echo ${OUT_LIST[@]} | tr " " "\n")`)

for i in "${OUT_LIST[@]}"; do ln -f -s $PWD/$i $EXEC/archives/$SUBPROJECT.outputs/$i ; done
for i in "${PROC_LIST[@]}"; do ln -s $PWD/$i $EXEC/archives/$SUBPROJECT.processing/$i ; done && ln -s $EXEC/config/OTU_env.txt $EXEC/archives/$SUBPROJECT.processing/

# logs
cd $EXEC/log
LOGS=(`ls -tr | awk 'BEGIN{FS="."} {if(NR==1){prev=$1;i=1} else{if(prev!=$1){prev=$1;i=i+1}};if(NF==2){print i,$1,"x",$2} else {print i,$1,$2,$3}}' | sort -k 1,1n -k 5,5r -k 4,4n | sed 's/ x / /' | cut -d " " -f 2- | tr " " "."`)
for log in "${LOGS[@]}"
do
	log_split=(${log//./ })
	if [ ${#log_split[@]} -eq 2 ] || [ ${log_split[1]} -eq 1 ]
	then
		TEXT="${log%%.*} standard ${log##*.}"
		printf '%.0s#' $(seq 1 $((12+${#TEXT}))) | sed 's/$/\n/'
		echo "##### $TEXT #####"
		printf '%.0s#' $(seq 1 $((12+${#TEXT}))) | sed 's/$/\n/'
		grep -v $'\r' $log
	else
		sed '/^mothur v\./,/to exit program/d' $log | grep -v $'\r' | sed '/^$/N;/\n$/N;//D'
	fi
done > ../archives/$SUBPROJECT.outputs/$SUBPROJECT.log

# List files
(. $BIN/list_step_files.sh)

echo END
