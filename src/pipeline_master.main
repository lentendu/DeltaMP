#!/bin/bash

# 
# DeltaMP, a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
# Copyright (C) 2018 Guillaume Lentendu, Christina Wei√übecker, Anna Heintz-Buschart, Tesfaye Wubet
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

## Create directories and symlink to files of REF_SUBPROJECT
echo "init_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.init.$SUBPROJECT $BIN/init.sh)"

## Copy/download libraries data in project folder [and extract]
echo "get_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.get.$SUBPROJECT QUEUE_HOLD\${init_jobid} $BIN/get.sh)"

## Demultiplex
if [ $TECH == "454" ] && [ $DEMULTI == "no" ]
then
	echo "demulti_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.${TECH}_demulti.$SUBPROJECT QUEUE_ARRAYS 1-${LIB1_SIZE}QUEUE_THREADMAX$MAX_TASK QUEUE_HOLD\${get_jobid} $BIN/${TECH}_demulti.sh)"
fi

## Quality check
echo "raw_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.${TECH}_${RAW_EXT}.$SUBPROJECT QUEUE_ARRAYS 1-${LIB3_SIZE}QUEUE_THREADMAX$MAX_TASK QUEUE_HOLD\${get_jobid}QUEUE_SEP\${demulti_jobid%.*} $BIN/${TECH}_${RAW_EXT}.sh)"
if [ $TECH == "Illumina" ]
then
	echo "pair_end_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.${TECH}_pair_end.$SUBPROJECT QUEUE_ARRAYS 1-${LIB3_SIZE}QUEUE_THREADMAX$MAX_TASK QUEUE_HOLD\${raw_jobid%.*} $BIN/${TECH}_pair_end.sh)"
fi
echo "raw_stat_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.${TECH}_raw_stat.$SUBPROJECT QUEUE_ARRAYS 1-${LIB1_SIZE}QUEUE_THREADMAX$MAX_TASK QUEUE_HOLD\${raw_jobid%.*}QUEUE_SEP\${pair_end_jobid%.*} $BIN/${TECH}_raw_stat.sh)"
echo "opt_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.${TECH}_opt.$SUBPROJECT QUEUE_ARRAYS 1-${LIB3_SIZE}QUEUE_THREADMAX$MAX_TASK QUEUE_HOLD\${raw_stat_jobid%.*} $BIN/${TECH}_opt.sh)"
echo "qual_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.${TECH}_quality.$SUBPROJECT QUEUE_HOLD\${opt_jobid%.*} $BIN/${TECH}_quality.sh)"

## Trim (,align (,subsample)) , chimera check in array jobs, and merge
if [ $CUT_DB == "yes" ] && [ ! -f $DBFOLD/$DBCUT.fasta ]
then
	echo "cut_db_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.cut_db.$SUBPROJECT $BIN/cut_db.sh)"
	HOLD_CUT_DB=QUEUE_SEP\${cut_db_jobid}
fi
echo "trim_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.trim.$SUBPROJECT QUEUE_ARRAYS 1-${SAMP_SIZE}QUEUE_THREADMAX$MAX_TASK QUEUE_HOLD\${qual_jobid}${HOLD_CUT_DB} $BIN/trim.sh)"
echo "merge_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.merge.$SUBPROJECT QUEUE_HOLD\${trim_jobid%.*} $BIN/merge.sh)"

## OTUs and taxonomic assignment
echo "otu_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.OTU.$SUBPROJECT QUEUE_HOLD\${merge_jobid} $BIN/OTU.sh)"
echo "id_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.id.$SUBPROJECT QUEUE_HOLD\${otu_jobid} $BIN/id.sh)"

## OTU tables, documentation, logs and copy back to output directory
echo "end_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.end.$SUBPROJECT QUEUE_HOLD\${id_jobid} $BIN/end.sh)"

## Archive processing files
echo "processing_archiver_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.processing_archiver.$SUBPROJECT QUEUE_HOLD\${end_jobid} $BIN/archiver.sh)"

## Archive outputs
echo "output_archiver_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.output_archiver.$SUBPROJECT QUEUE_HOLD\${qual_jobid}QUEUE_SEP\${end_jobid} $BIN/archiver.sh)"

## Archive raw reads
echo "raw_archiver_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.${RAW_EXT}_archiver.$SUBPROJECT QUEUE_HOLD\${demulti_jobid%.*}QUEUE_SEP\${qual_jobid} $BIN/archiver.sh)"

## Document
echo "doc_jobid=\$(QUEUE_SUBQUEUE_OPTIONS QUEUE_JOBNAME $DELTAMP_VER.doc.$SUBPROJECT QUEUE_HOLD\${output_archiver_jobid}QUEUE_SEP\${processing_archiver_jobid} $BIN/doc.sh)"
