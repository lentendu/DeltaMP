#!/bin/bash

# author: Guillaume Lentendu (lentendu@rhrk.uni-kl.de)

# Usage info
show_help() {
cat << EOF

NAME
	DeltaMP version ${VERSION[DELTAMP]} - a flexible, reproducible and resource efficient metabarcoding amplicon pipeline for HPC
	
SYNOPSIS
	Usage: ${0##*/} [-a account_or_project_name] [-cdhqs] [-m max_running_tasks] [-r SUBRPOJECT] [CONFIGURATION_FILE]

DESCRIPTION
	-h	display this help and exit
	
	-a	account or project name for the job queuing system
	
	-c	at the end of a dry run (-d option), avoid the deletion of the SUBPROJECT and PROJECT (if empty) directories from output directory
		
	-d	avoid submission to queuing system and only display pipeline submission informations (aka. dry run)
	
	-f	display default values for optional configuration parameters
		
	-n	avoid checkpointing (i.e. searching for previous SUBPROJECT) and run the pipeline from the beginning
	
	-m max_running_tasks
		impose a limit on the maximum number of concurrently running tasks per array jobs, default is 400
		
	-q	proceed until quality step only
		 
	-s	proceed until demultiplexing step only
		
	-r SUBRPOJECT
		only execute additional jobs or with different input variables compared to SUBPROJECT. This will only work if both configuration files have the same input libraries and output directory.

AUTHOR
	Guillaume Lentendu, Christina Weißbecker, Anna Heintz-Buschart and Tesfaye Wubet

REPORTING BUGS
	Submit suggestions and bug-reports at <https://github.com/lentendu/issues>, send a pull request on <https://github.com/lentendu>, or compose  an e-mail to Guillaume Lentendu <lentendu@rhrk.uni-kl.de>.
	
COPYRIGHT
	Copyright (C) 2018 Guillaume Lentendu, Christina Weißbecker, Anna Heintz-Buschart and Tesfaye Wubet

	This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
	 
	This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
	 
	You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.

EOF
}

show_doc() {
cat << EOF

# Refer to the manual at $DELTAMP_BUILD/documentation/deltamp_${VERSION[DELTAMP]}_documentation.pdf and be sure to use the correct configuration file format.
# A template configuration file can be found at $DELTAMP_BUILD/documentation/configuration_file_template.tsv

# Aborting
EOF
}

show_default() {
echo ""
echo "## Configuration default values ##"
for i in `ls -v $BIN/variables_definition*`
do
	if [ ${i##*_} != "definition.tsv" ]
	then
		echo ${i##*_} | sed 's/\(.*\)\.tsv$/## \1 specific ##/'
	fi
	grep -v "#" $i | awk 'BEGIN{FS="\t"} {print $3"\t"$2}' | column -t -s $'\t'
	echo ""
done | sed '1d;$d'
echo ""
}

# record all variables set
STIME=`date +%s`
(set -o posix; set > /tmp/amp.$STIME.set)
START_TIME=`date +%s`
INIT_DIR=$PWD

# Version
declare -A VERSION
VERSION[DELTAMP]=
DELTAMP_BUILD=
DELTAMP_VER=deltamp${VERSION[DELTAMP]//./}
BIN=$DELTAMP_BUILD/bin

# Option's default value
ARGUMENTS="$@"
CLEAN=yes
DRY=no
MAX_TASK=400
QUAL_ONLY=no
DEMULTI_ONLY=no
CHECKP=yes
REF_SUBPROJECT=no

error_help(){
	echo "#Error: $1"
	show_help | fmt -s -w $(tput cols)
	exit $2
} >&2

error_doc(){
echo "#Error: $1"
	show_doc | fmt -s -w $(tput cols)
	exit $2
} >&2


# get options
while getopts ":a:cdfhm:nqsr:" opt
do
	case $opt in
		h)	show_help | fmt -s -w $(tput cols)
			exit 0;;
		a)	DELTAMP_ACCOUNT=${OPTARG};;
		c)	CLEAN=no;;
		d)	DRY=yes;;
		f)	show_default | fmt -s -w $(tput cols)
			exit 0;;
		m)	[[ ${OPTARG} =~ ^[0-9]+$ ]] || error_help " ${OPTARG} is not a number" 1
			MAX_TASK=${OPTARG};;
		n)	CHECKP=no;;
		q)	QUAL_ONLY=yes;;
		s)	DEMULTI_ONLY=yes;;
		r)	[[ -d ${OPTARG} ]] || error_help "Directory ${OPTARG} does not exist" 1
			[[ -w ${OPTARG} ]] || error_help "Directory ${OPTARG} is not writable" 1
			REF_SUBPROJECT=${OPTARG};;
		\?)	error_help "# Invalid option: -${OPTARG}" 1
			;;
		:)	error_help "# Option -${OPTARG} requires an argument." 1
			;;
	esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

if [ -z "$1" ]
then 
	error "Configuration file is missing." 1 
else
	METAD=`readlink -f $1` ; shift
fi

# Additionnal variables definition
	# mandatory variables from configuration file
while IFS=$'\t' read var std def acc
do
	unset $var
	val=`grep "$def" $METAD | cut -f 2- | sed 's/[ \t]*$//'`
	if [ -z "$val" ]
	then
		if [ $std == "#" ]
		then
			error_doc "# Configuration file error: the parameter '$def' is missing and is compulsory." 1
		else
			declare $var="$std"
		fi
	elif [ "$std" != "#" ]
	then
		flag=1
		for i in $acc
		do
			if [[ $val =~ $i ]]
			then
				flag=0
			fi
		done
		if [ $flag -eq 0 ]
		then
			if [ -z "`echo "$val" | sed -n '/\t/p'`" ]
			then
				declare $var="$val"
			else
				IFS=$'\t' read -r -a $var <<< "$val"
			fi
		else
			echo "# Configuration file error: the value of parameter '$def' is not accepted (currently set to $val)." >&2
			error_doc "The accepted values $(if [[ $acc == *"^"* ]] ; then echo 'should match the regex(s)' ; else echo 'are' ; fi): $acc (default value is $std)." 1
		fi		
	else
		declare $var="$val"
	fi
done < $BIN/variables_definition.tsv

	# optional variables from configuration file
while IFS=$'\t' read var std def acc
do
	unset $var
	val=`grep "$def" $METAD | awk 'BEGIN{FS="\t"}{print $2}'`
	if [ -z "$val" ]
	then
		declare $var="$std"
	else
		flag=0
		for i in $acc
		do
			if [[ $val =~ $i ]]
			then
				flag=1
			fi
		done
		if [ $flag -eq 1 ]
		then
			declare $var="$val"
		else
			echo "# Configuration file error: the value of parameter '$def' is not accepted (currently set to $val)." >&2
			error_doc "The accepted values $(if [[ $acc == *"^"* ]] ; then echo 'should match the regex(s)' ; else echo 'are' ; fi): $acc (default value is $std)." 1
		fi
	fi
done < $BIN/variables_definition_$TECH.tsv

	# few checks
if [ $TECH == "454" ]
then
	RAW_EXT=sff
	if [ $SEQ_DIR == "forward" ]
	then
		FLIP=false
	elif [ $SEQ_DIR == "reverse" ]
	then
		FLIP=true
		read FWD RVS <<<"$RVS $FWD"
		read FWD_NAME RVS_NAME <<<"$RVS_NAME $FWD_NAME"
	else
		error_doc "# Configuration file error: wrong sequence direction $SEQ_DIR" 1
	fi
elif [ $TECH == "Illumina" ]
then
	RAW_EXT=fastq
	DEMULTI=yes
	if [ DEMULTI_ONLY == "yes" ]
	then
	error_doc "# Demultiplexing is not available for $TECH libraries." 1
	fi
else
	error_doc "# Configuration file error: wrong sequence technology $TECH" 1
fi

	
# Databases
declare -A CITATION FULLCITATION
if [ $TARG == "ITS" ]
then
	if [ $CUT_DB == "yes" ]
	then
		DBCUT=$DB.$ITSX
	fi
	if [ $ASSIGN_FUNCT == "yes" ]
	then
		CITATION[FUN]="Nguyen et al., 2016"
		FULLCITATION[FUN]="Nguyen, N. H., Song, Z., Bates, S. T., Branco, S., Tedersoo, L., Menke, J., … Kennedy, P. G. (2016). FUNGuild: An open annotation tool for parsing fungal community datasets by ecological guild. Fungal Ecology, 20, 241–248."
		VERSION[FUN]=1.1
	fi
fi

if ( [ $TARG == "18S" ] || [ $TARG == "16S" ] ) && [ $CUT_DB == "yes" ]
then
	if [ $TECH == "454" ] && [ $FLIP == "true" ]
	then
		DBCUT=$RVS_NAME.$FWD_NAME.$DB
	else
		DBCUT=$FWD_NAME.$RVS_NAME.$DB
	fi
fi

DBALIGN=$DB.align
if [ -f $DBFOLD/$DBALIGN.fasta ] && [ $CUT_DB == "yes" ]
then
	DBCHOP=$DBCUT.align
fi

# Pre-clustering
if [ $CLUST == "swarm" ] && [ $PRECLUST != "no" ]
then
	error_doc "# Configuration file error: pre-clustering is not allowed for swarm based OTU clustering. Turn off the 'Pre-clustering' argument with 'no' or use another clustering algorithm." 1
fi

if [ $PRECLUST == "mothur" ]
then
	if [ ! -f $DBFOLD/$DBALIGN.fasta ]
	then
		error_doc "# Configuration file error: the mothur pre-clustering method could only be used if an aligned version of the reference database is available." 1
	fi
fi

# Dependencies
# modules
# gnu parallel
# coreutils
# ghostscript
# fontconfig
# R
# pigz

# Citations
	# MOTHUR, UCHIME, classifier
CITATION[MOTHUR]="Schloss et al., 2009"
FULLCITATION[MOTHUR]="Schloss PD, Westcott SL, Ryabin T et al. (2009) Introducing mothur: Open-Source, Platform-Independent, Community-Supported Software for Describing and Comparing Microbial Communities. Applied and Environmental Microbiology, 75, 7537–7541."
VERSION[MOTHUR]=`mothur --version | grep version | cut -d "=" -f 2`
CITATION[UCHIME]="Edgar et al., 2011"
FULLCITATION[UCHIME]="Edgar RC, Haas BJ, Clemente JC, Quince C, Knight R (2011) UCHIME improves sensitivity and speed of chimera detection. Bioinformatics, 27, 2194–2200."
CITATION[TAXO]="Wang et al., 2007"
FULLCITATION[TAXO]="Wang Q, Garrity GM, Tiedje JM, Cole JR (2007) Naïve Bayesian Classifier for Rapid Assignment of rRNA Sequences into the New Bacterial Taxonomy. Applied and Environmental Microbiology, 73, 5261–5267."

	# OBITools and ecoPCR
CITATION[OBI]="Boyer et al., 2016"
FULLCITATION[OBI]="Boyer F, Mercier C, Bonin A et al. (2016) obitools: a unix-inspired software package for DNA metabarcoding. Molecular Ecology Resources, 16, 176–182."
VERSION[OBI]=`pip show OBITools | grep Version | awk '{print $2}'`
CITATION[ECO]="Ficetola et al. 2010"
FULLCITATION[ECO]="Ficetola GF, Coissac E, Zundel S et al. (2010) An in silico approach for the evaluation of DNA barcodes. Bmc Genomics, 11, 434."

	#BIOM format
CITATION[BIOM]="McDonald et al., 2012"
FULLCITATION[BIOM]="McDonald, D., Clemente, J. C., Kuczynski, J., Rideout, J. R., Stombaugh, J., Wendel, D., … others. (2012). The Biological Observation Matrix (BIOM) format or: how I learned to stop worrying and love the ome-ome. GigaScience, 1(1), 7."
VERSION[BIOM]=`biom --version | awk '{print $3}'`

	#ITSx
if [ $TARG == "ITS" ] && [ $ITSX != "no" ]
then
	CITATION[ITSX]="Bengtsson‐Palme Johan et al. 2013"
	FULLCITATION[ITSX]="Bengtsson‐Palme Johan, Ryberg Martin, Hartmann Martin, Branco Sara, Wang Zheng, Godhe Anna, … Bunce Michael. (2013). Improved software detection and extraction of ITS1 and ITS2 from ribosomal ITS sequences of fungi and other eukaryotes for analysis of environmental sequencing data. Methods in Ecology and Evolution, 4(10), 914–919. doi:10.1111/2041-210X.12073"
	VERSION[ITSX]=`ITSx --license 2>&1 | sed -n 's/^Version: //p'`
fi


if [ $TECH == "454" ]
then
	# 454 SOP
	CITATION[SOP]="Schloss et al., 2011"
	FULLCITATION[SOP]="Schloss PD, Gevers D, Westcott SL (2011) Reducing the Effects of PCR Amplification and Sequencing Artifacts on 16S rRNA-Based Studies. PLOS ONE, 6, e27310."
	# Denoising
	CITATION[DEN]="Gaspar et al., 2015"
	FULLCITATION[DEN]="Gaspar, J. M., & Thomas, W. K. (2015). FlowClus: efficiently filtering and denoising pyrosequenced amplicons. BMC Bioinformatics, 16(1). doi:10.1186/s12859-015-0532-1"
	VERSION[DEN]=`FlowClus -h 2>&1 | head -1 | grep -o "version [0-9]*.[0-9]*" | sed 's/version //'`
	CITATION[CUT]="Martin, 2011"
	FULLCITATION[CUT]="Martin, M. (2011). Cutadapt removes adapter sequences from high-throughput sequencing reads. EMBnet.Journal, 17(1), 10–12."
	VERSION[CUT]=`cutadapt --version`
	
elif [ $TECH == "Illumina" ]
then
	# MiSeq SOP
	CITATION[SOP]="Kozich et al., 2013"
	FULLCITATION[SOP]="Kozich, J. J., Westcott, S. L., Baxter, N. T., Highlander, S. K., & Schloss, P. D. (2013). Development of a dual-index sequencing strategy and curation pipeline for analyzing amplicon sequence data on the MiSeq Illumina sequencing platform. Applied and Environmental Microbiology, AEM.01043-13. doi:10.1128/AEM.01043-13"
	# PANDAseq
	CITATION[PANDA]="Masella et al., 2012"
	FULLCITATION[PANDA]="Masella AP, Bartram AK, Truszkowski JM, Brown DG, Neufeld JD (2012) PANDAseq: paired-end assembler for illumina sequences. BMC Bioinformatics, 13, 31."
	VERSION[PANDA]=`pandaseq -v 2>&1 | awk '{print $2}'`
	# pre-clustering
	CITATION[PRECL]="Huse et al., 2010"
	FULLCITATION[PRECL]="Huse SM, Welch DM, Morrison HG, Sogin ML (2010) Ironing out the wrinkles in the rare biosphere through improved OTU clustering. Environmental Microbiology, 12, 1889–1898."
	# cd-hit-454
	CITATION[PRECDHIT]="Niu et al., 2010"
	FULLCITATION[PRECDHIT]="Niu B, Fu L, Sun S, Li W (2010) Artificial and natural duplicates in pyrosequencing reads of metagenomic data. BMC Bioinformatics, 11, 187."
	VERSION[PRECDHIT]=4.6.1
fi

	# Clustering algorithms
if [ $CLUST == "cd-hit-est" ]
then
	VERSION[CLUST]=4.6.1
	CITATION[CLUST]="Fu et al., 2012"
	FULLCITATION[CLUST]="Fu L, Niu B, Zhu Z, Wu S, Li W (2012) CD-HIT: accelerated for clustering the next-generation sequencing data. Bioinformatics, 28, 3150–3152."
elif [ $CLUST == "sumaclust" ]
then
	VERSION[CLUST]=`sumaclust -h 2>&1 | grep Version | awk '{print $3}'`
	CITATION[CLUST]="Mercier et al., 2013"
	FULLCITATION[CLUST]="Mercier C, Boyer F, Bonin A, Coissac É (2013) SUMATRA and SUMACLUST: fast and exact comparison and clustering of sequences. http://metabarcoding.org/sumatra"
elif [ $CLUST == "mcl" ]
then
	VERSION[CLUST]=`mcl --version | awk 'NR==1{print $2}'`
	CITATION[CLUST]="van Dongen, 2000"
	FULLCITATION[CLUST]="van Dongen S (2000) Graph Clustering by Flow Simulation. University of Utrecht. http://micans.org/mcl/"
elif [ $CLUST == "vsearch" ]
then
	VERSION[CLUST]=`vsearch --version 2>&1 | sed -n '1s/vsearch v\([^_]*\)_.*$/\1/p'`
	CITATION[CLUST]="Rognes et al., 2016"
	FULLCITATION[CLUST]="Rognes, T., Flouri, T., Nichols, B., Quince, C., & Mahé, F. (2016). VSEARCH: a versatile open source tool for metagenomics (No. e2409v1). PeerJ Preprints. "
	CITATION[CLUST2]="Edgar, 2013"
	FULLCITATION[CLUST2]="Edgar RC (2013) UPARSE: highly accurate OTU sequences from microbial amplicon reads. Nature Methods, 10, 996–998."
elif [ $CLUST == "swarm" ]
then
	VERSION[CLUST]=`swarm --version | awk 'NR==1{print $2}'`
	CITATION[CLUST]="Mahé et al., 2015"
	FULLCITATION[CLUST]="Mahé F, Rognes T, Quince C, Vargas C de, Dunthorn M (2015) Swarm v2: highly-scalable and high-resolution amplicon clustering. PeerJ, 3, e1420."
fi

	# QIIME for demultiplexing
CITATION[QIIME]="Caporaso et al., 2010"
FULLCITATION[QIIME]="Caporaso JG, Kuczynski J, Stombaugh J et al. (2010) QIIME allows analysis of high-throughput community sequencing data. Nature Methods, 7, 335–336."
VERSION[QIIME]=`pip show QIIME | grep Version | awk '{print $2}'`

# [Create and] dive to output PROJECT directory
if [ -d $OUT_PATH/$PROJECT ]
then
	cd $OUT_PATH/$PROJECT
else
	mkdir $OUT_PATH/$PROJECT && cd $OUT_PATH/$PROJECT
fi

# Create SUBPROJECT directory
HASH=`cat <(echo $START_TIME ${VERSION[DELTAMP]}) $METAD | cksum | awk '{print $1}'`
SUBPROJECT=`echo $PROJECT\_$TECH\_$TARG\_$HASH`
mkdir $SUBPROJECT
cd $SUBPROJECT
mkdir config
cp $METAD config/configuration.$SUBPROJECT.tsv && METADATA=configuration.$SUBPROJECT.tsv
OUT=$OUT_PATH/$PROJECT/$SUBPROJECT
EXEC=$EXEC_PATH/$SUBPROJECT

# Store barcodes, libraries and sample lists into files
if [ $TECH == "454" ]
then
	sed '1,/^Barcode sequence/d;/^$/d;s/^/barcode\t/' config/$METADATA | awk '{print}' > config/barcodes.txt
	cut -f 4 config/barcodes.txt | sort | uniq > config/lib1.list
	LIB1_SIZE=`sed -n '$=' config/lib1.list`
	sed 's/-/_/g;s/ftp\.sra.*\///' config/lib1.list > config/lib2.list
	if [ $DEMULTI == "no" ]
	then
		while read head bar samp lib; do echo $samp $samp"."${lib%.*} ; done < config/barcodes.txt | sed 's/-/_/g;s/ftp\.sra.*\///' | sort | uniq > config/lib3.list
	else
		if [ $(cut -f 3 config/barcodes.txt | sort | uniq | wc -l) -gt $(cut -f 4 config/barcodes.txt | sort | uniq | wc -l) ]
		then
			cd .. && rm -r $SUBPROJECT
			if [ ! "$(ls -A)" ] ; then cd .. && rmdir $PROJECT ; fi
			echo "# There is more samples than libraries, it seems that the libraries are not demultiplexed" >&2
			error_doc "# Set 'Libraries already demultiplexed' to 'no' in the configuration file to allow deltamp execution." 1
		else
			while read head bar samp lib; do echo $samp ${lib%.*} ; done < config/barcodes.txt | sed 's/-/_/g;s/ftp\.sra.*\///' | sort | uniq > config/lib3.list
		fi
	fi
	LIB3_SIZE=`sed -n '$=' config/lib3.list | sed 's/$/:10/'`
	sort -k 1,1 config/lib3.list | awk '{if(NR==1){S=$1;printf "%s %s",S,$2} else {if($1==S){printf " %s",$2} else {S=$1;printf "\n%s %s",S,$2}}}END{printf "\n"}' > config/lib4.list
elif [ $TECH == "Illumina" ]
then
	LIB1_SIZE=1
	sed '1,/^Barcode sequence/d;/^$/d;s/^\t//' config/$METADATA | awk '{print}' > config/barcodes.txt
	sed 's/\.fastq[^\t$]*//g;s/-/_/g;s/ftp\.sra[^\t]*\///g' config/barcodes.txt > config/lib3.list
	LIB3_SIZE=`sed -n '$=' config/lib3.list`
	while read samp fwd rvs
	do
		prefix=`printf "%s\n%s\n" $fwd $rvs | sed -e 'N;s/^\(.*\).*\n\1.*$/\1/'`
		echo $prefix ${fwd/$prefix/} ${rvs/$prefix/}
	done < config/barcodes.txt > config/lib1.list
	sed 's/-/_/g;s/ftp\.sra.*\///' config/lib1.list > config/lib2.list
	paste <(cut -f 1 config/lib3.list) <(cut -f 1 config/lib2.list) | sort -k 1,1 | awk '{if(NR==1){S=$1;printf "%s %s",S,$2} else {if($1==S){printf " %s",$2} else {S=$1;printf "\n%s %s",S,$2}}}END{printf "\n"}' > config/lib4.list
fi
SAMP_SIZE=`sed -n '$=' config/lib4.list`

# Save newly set variables to file (avoiding lowercase variables from loops):
join -v 1 <(set -o posix; set | tr "=" "\t" | sort -k 1,1 ) <(cat /tmp/amp.$STIME.set | tr "=" "\t" | sort -k 1,1 ) | grep -v "^[a-z]\|BASH_REMATCH" | sed "s/'//g" > config/env.txt
rm -f /tmp/amp.$STIME.set
(set -o posix; set > /tmp/amp.$STIME.set)

# Steps to queue (no archiving for already demultiplexed sff)
if [ $DEMULTI_ONLY == "yes" ]
then
	if [ $TECH == "454" ] && [ $DEMULTI == "no" ]
	then
		. <(sed '/^## Quality/,/^## Archive raw/d;/^## Document/,$d' $BIN/pipeline_master) config/configuration.$SUBPROJECT.tsv > config/steps
	else
		cd .. && rm -r $SUBPROJECT
		if [ ! "$(ls -A)" ] ; then cd .. && rmdir $PROJECT ; fi
		error_doc "# The -s option can only be used for non demultiplexed libraries and demultiplexing is only supported for 454 libraries." 1
	fi
else
	if [ $QUAL_ONLY == "yes" ]
	then
		if [ $TECH == "454" ] && [ $DEMULTI == "yes" ]
		then
			. <(sed '/^## Trim/,/^## Archive outputs/d;/^## ## Archive raw/,$d' $BIN/pipeline_master) config/configuration.$SUBPROJECT.tsv > config/steps
		else
			. <(sed '/^## Trim/,/^## Archive outputs/d;/^## Document/,$d' $BIN/pipeline_master) config/configuration.$SUBPROJECT.tsv > config/steps
		fi
	else
		if [ $TECH == "454" ] && [ $DEMULTI == "yes" ]
		then
			. <(sed '/^## Archive raw/,/^## Document/d' $BIN/pipeline_master) config/configuration.$SUBPROJECT.tsv > config/steps
		else
			. $BIN/pipeline_master config/configuration.$SUBPROJECT.tsv > config/steps
		fi
	fi
fi

# Compare with previous (the one with less differences) or with the provided previous SUBPROJECT, and cut to avoid redo identical part(s)
cd ..
if [ $CHECKP == "yes" ]
then
	if [ $REF_SUBPROJECT == "no" ]
	then
		PREV_LIST=(`ls -dt $PROJECT\_$TECH\_$TARG\_* | grep -v $SUBPROJECT`) # last first
	else
		PREV_LIST=$REF_SUBPROJECT
	fi

	if [ ! -z "$PREV_LIST" ]
	then
		unset TMP_SCRIPT TMP_DIF
		declare -A TMP_SCRIPT TMP_DIF BAR_DIF TMP_PREV
		for i in ${PREV_LIST[@]}
		do
			# which environmental variable(s) differ between the two SUBPROJECTs
			TMP_DIF[$i]=$(comm -13 <(sort $i/config/env.txt) <(sort $SUBPROJECT/config/env.txt) | grep -v "$HASH\|TIME\|CLEAN\|REF_SUBPROJECT\|CITATION\|VERSION\|ARGUMENTS\|DRY" | awk '{print $1}' | tr "\n" "#" |  sed 's/#$//')
			BAR_DIF[$i]=$(comm -3 <(sort $i/config/barcodes.txt) <(sort $SUBPROJECT/config/barcodes.txt) | head -1 | tr "\t" "#")
			if [ -z "${TMP_DIF[$i]}" ] && [ -z "${BAR_DIF[$i]}" ]
			then
				rm -r $SUBPROJECT
				echo "# Previous subproject $i is identical." >&2
				error_doc "# At least one parameter need to differ with previous subproject to allow deltamp execution." 1
			elif [ ! -z "${BAR_DIF[$i]}" ]
			then
				rm -r $SUBPROJECT
				echo "# Previous subproject $i have a different barcode and/or library list." >&2
				error_doc "# To avoid using $i as reference subproject, you can for example change the output directory (currently $OUT_PATH) in the configuration file." 1
			fi
			# in which step script(s) the differing variable(s) are found
			unset MATCH_REGEX
			MATCH_REGEX=$(grep $(echo ${TMP_DIF[$i]} | sed 's/#/[^A-Z_]\\\|$/g;s/^/$/;s/$/[^A-Z_]/') $(awk '$0~"QUEUE_SUB"{sub(")$","");print $NF}' $SUBPROJECT/config/steps | sort -u) | cut -d ":" -f 1 | sed 's/.*\///;s/\.sh$//' | sort -u | tr "\n" "|" | sed 's/|$//;s/|/\\\|/g')
			if [ -z $MATCH_REGEX ]
			then
				if [ ${TMP_DIF[$i]} == "QUAL_ONLY" ]
				then
					TMP_SCRIPT[$i]=trim
				else
					TMP_SCRIPT[$i]=$(sed '1d;s/ QUEUE_HOLD[^ ]*//;s/ /_/g' $SUBPROJECT/config/steps | nl | sort -k 2,2 | join -v 1 -1 2 - <(sed 's/ QUEUE_HOLD[^ ]*//;s/'$i'/'$SUBPROJECT'/g;s/ /_/g' $i/config/steps.final | sort) | sort -k 2,2n | head -1 | sed 's/^.*\///;s/ .*$//')
				fi
			else
				TMP_SCRIPT[$i]=$(awk '$0!~"^#"{print $NF}' $SUBPROJECT/config/steps | grep -m 1 -o $MATCH_REGEX)
			fi
			# which was the last step executed before the differing step
			TMP_PREV[$i]=$(awk '$0!~"^#"{print $NF}' $i/config/steps.final | tac | grep -o -m 1 $(sed '/'"${TMP_SCRIPT[$i]}"'/,$d' $BIN/ref.steps.$TECH | tr "\n" " " | sed 's/ $/\n/;s/ /\\\|/g'))
		done
		# the previous SUBPROJECT which has the most number of steps in common with the current SUBPROJECT is set as seed
		REF_SUBPROJECT=`for i in "${PREV_LIST[@]}"; do sed -n '/'"${TMP_PREV[$i]}"'/=' $BIN/ref.steps.$TECH | paste <(echo $i) <(stat -c "%Y" $i) - ; done | sort -k 3,3nr -k 2,2nr | cut -f 1 | head -1`
		FIRST_STEP=${TMP_SCRIPT[$REF_SUBPROJECT]}
		LAST_REF=${TMP_PREV[$REF_SUBPROJECT]}
		# the steps to be queued are updated accordingly: start with init, hold on previous subproject last step (avoid if not anymore in the queue), jump till FIRST_STEP and make it dependent on init step completion
		LAST_REF_JOBID=$(deltamp.queue | grep ${DELTAMP_VER}.${LAST_REF}.${REF_SUBPROJECT} | awk 'NR==1{print $1}')
		if [ -z $LAST_REF_JOBID ]
		then
			awk -v F=$FIRST_STEP 'BEGIN{p=0} {if($NF~F".sh)$"){p=1} ; if(p || NR==1){print} else {print "#"$0}}' $SUBPROJECT/config/steps | awk -v V=$DELTAMP_VER -v S=$SUBPROJECT 'BEGIN{c=0} {if(NR>1 && $0!~"^#" && c==0){sub("QUEUE_HOLD[^ ]* ","QUEUE_HOLD${init_jobid} ");c+=1};print}' > $SUBPROJECT/config/steps.final
		else
			awk -v F=$FIRST_STEP 'BEGIN{p=0} {if($NF~F".sh)$"){p=1} ; if(p || NR==1){print} else {print "#"$0}}' $SUBPROJECT/config/steps | awk -v V=$DELTAMP_VER -v S=$SUBPROJECT -v L=$LAST_REF_JOBID 'BEGIN{c=0} {if(NR==1){sub(V".init."S" ",V".init."S" QUEUE_HOLD"L" ")} else {if($0!~"^#" && c==0){sub("QUEUE_HOLD[^ ]* ","QUEUE_HOLD${init_jobid} ");c+=1}};print}' > $SUBPROJECT/config/steps.final
		fi
		# Check archiving of raw reads in previous subproject
		if [ $TECH == "454" ] && [ $DEMULTI == "no" ]
		then
			for i in "" -internal.md5 .md5
			do
				ln -s $OUT_PATH/$PROJECT/$REF_SUBPROJECT/$REF_SUBPROJECT.$RAW_EXT.tar.gz$i $OUT/$SUBPROJECT.$RAW_EXT.tar.gz$i
			done
		fi
	else
		# if there is no previous SUBPROJECT, the init step is skipped
		sed '/^init_jobid/s/^/#/;/get.sh)$/s/ QUEUE_HOLD[^ ]* / /' $SUBPROJECT/config/steps > $SUBPROJECT/config/steps.final
	fi
else
	# if checkpointing is not allowed, the init step is skipped
	sed '/^init_jobid/s/^/#/;/get.sh)$/s/ QUEUE_HOLD[^ ]* / /' $SUBPROJECT/config/steps > $SUBPROJECT/config/steps.final
fi

# fix job dependencies
if [ $DEMULTI != "no" ]
then
	sed 's/QUEUE_SEP\${demulti_jobid%\.\*}//' $SUBPROJECT/config/steps.final > $SUBPROJECT/config/steps.final.tmp && mv $SUBPROJECT/config/steps.final.tmp $SUBPROJECT/config/steps.final
fi
if [ $TECH != "Illumina" ]
then
	sed 's/QUEUE_SEP\${pair_end_jobid%\.\*}//' $SUBPROJECT/config/steps.final > $SUBPROJECT/config/steps.final.tmp && mv $SUBPROJECT/config/steps.final.tmp $SUBPROJECT/config/steps.final
fi

# Add account/project name to queuing commands
if [ ! -z $DELTAMP_ACCOUNT ]
then
	sed "s/QUEUE_SUB/QUEUE_SUB QUEUE_ACCOUNT $DELTAMP_ACCOUNT/" $SUBPROJECT/config/steps.final > $SUBPROJECT/config/steps.final.tmp && mv $SUBPROJECT/config/steps.final.tmp $SUBPROJECT/config/steps.final
fi

# Save variables about previous SUBPROJECT
comm -23 <(set -o posix; set | sort) <(sort /tmp/amp.$STIME.set) | tr "=" "\t" | grep -v "^[a-z]" | grep -P -v "^PWD\t" | sed "s/'//g" > $SUBPROJECT/config/prev.txt
rm -f /tmp/amp.$STIME.set

# Tree 
grep -v "^#" $SUBPROJECT/config/steps.final | awk '$0~"QUEUE_SUB"{if($1~"archiver"){print $1} else print $NF"\tx"}' | sed 's/.*\///;s/\.sh)\t/\t/;s/_jobid.*$/\tx/' | sort | join -a 2 -2 2 -o 2.1,0,1.2 -e "." -t $'\t' - <(nl $BIN/ref.steps.$TECH | sort -k 2,2) | sort -k 1,1n | cut -f 2- > $SUBPROJECT/config/steps.summary
if [ $REF_SUBPROJECT != "no" ]
then
	if [ -f $REF_SUBPROJECT/config/tree.summary ]
	then
		PARAM=`cat <(sed '1,/^Parameters$/d' $REF_SUBPROJECT/config/tree.summary | cut -f 1) <(echo ${TMP_DIF[$REF_SUBPROJECT]} | tr "#" "\n") | sort -u`
		ALL_PREV=(`head -1 $REF_SUBPROJECT/config/tree.summary | cut -f 2- | paste - <(echo $SUBPROJECT)`)
		cat <(paste <(sed '/^Parameters$/,$d' $REF_SUBPROJECT/config/tree.summary) <(cat <(echo $SUBPROJECT) <(cut -f 2 $SUBPROJECT/config/steps.summary))) <(echo Parameters) <(paste <(echo $PARAM | tr " " "\n") <(for i in "${ALL_PREV[@]}"; do grep "$(echo $PARAM | sed 's/^/\^/;s/ /[ \t]\\\|\^/g;s/$/[ \t]/')" $i/config/env.txt | cut -d " " -f 2 | tr "\n" "\t" | sed 's/\t$/\n/' ; done | transpose_tab)) > $SUBPROJECT/config/tree.summary
	else
		cat <(echo -e "Steps\t$REF_SUBPROJECT\t$SUBPROJECT") <(paste $REF_SUBPROJECT/config/steps.summary <(cut -f 2 $SUBPROJECT/config/steps.summary)) <(echo Parameters) <(join <(grep "$(echo ${TMP_DIF[$REF_SUBPROJECT]} | sed 's/^/\^/;s/#/[ \t]\\\|\^/g;s/$/[ \t]/')" $REF_SUBPROJECT/config/env.txt | sort) <(grep "$(echo ${TMP_DIF[$REF_SUBPROJECT]} | sed 's/^/\^/;s/#/[ \t]\\\|\^/g;s/$/[ \t]/')" $SUBPROJECT/config/env.txt | sort) | tr " " "\t") > $SUBPROJECT/config/tree.summary
	fi
fi

# Execution
if [ $DRY == "yes" ]
then
	declare -a TITLE=("deltamp options" "new SUBPROJECT" "use of previous SUBPROJECT" "Commands to be passed to queuing system")
	echo "DRY RUN"
	echo ""
	printf '%'$((${#TITLE[0]}+9))'s\n' |tr " " "#"
	echo "### ${TITLE[0]}: ###"
	printf '%'$((${#TITLE[0]}+9))'s\n' |tr " " "#"
	printf 'dry run\t%s\nclean after dry run\t%s\ncheckpointing allowed\t%s\ndemultiplexing only\t%s\nquality check only\t%s\nreference subproject\t%s\nconfiguration file\t%s\n' "$DRY" "$CLEAN" "$CHECKP" "$DEMULTI_ONLY" "$QUAL_ONLY" "$REF_SUBPROJECT" "$METAD" | column -t -s $'\t'
	echo ""
	printf '%'$((${#TITLE[1]}+9))'s\n' |tr " " "#"
	echo "### ${TITLE[1]}: ###"
	printf '%'$((${#TITLE[1]}+9))'s\n' |tr " " "#"
	if [ $CLEAN == "no" ]
	then
		echo "The newly created subproject directory is $OUT"
	else
		echo "The newly created subproject directory would have been $OUT"
	fi
	echo ""
	if [ $REF_SUBPROJECT != "no" ]
	then
		printf '%'$((${#TITLE[2]}+9))'s\n' |tr " " "#"
		echo "### ${TITLE[2]}: ###"
		printf '%'$((${#TITLE[2]}+9))'s\n' |tr " " "#"
		echo "The initial steps of the pipeline are identical to $REF_SUBPROJECT (until ${LAST_REF} step)."
		echo "deltamp execution will begin with ${FIRST_STEP} step."
		echo ""
		echo "The following parameters differ between both SUBPROJECTs:"
		diff --suppress-common-lines -y <(sort $SUBPROJECT/config/env.txt | grep -v "${SUBPROJECT##*_}\|START\|CITATION\|VERSION\|ARGUMENTS") <(sort $REF_SUBPROJECT/config/env.txt | grep -v "${REF_SUBPROJECT##*_}\|START\|CITATION\|VERSION\|ARGUMENTS") | awk '{print $1"\t"$2"\t"$5}' | cat <(echo -e "Parameter\tCurrent SUBPROJECT\tPrevious SUBPROJECT") - > $SUBPROJECT/config/prev.diff.txt
		column -t -s $'\t' $SUBPROJECT/config/prev.diff.txt
		echo ""
	fi
	printf '%'$((${#TITLE[3]}+9))'s\n' |tr " " "#"
	echo "### ${TITLE[3]}: ###"
	printf '%'$((${#TITLE[3]}+9))'s\n' |tr " " "#"
	grep -v "^#" $SUBPROJECT/config/steps.final
	echo ""
	echo "END DRY RUN"
	if [ $CLEAN == "yes" ]
	then
		rm -r $SUBPROJECT
		if [ ! "$(ls -A)" ] ; then cd .. && rmdir $PROJECT ; fi
	fi
	exit 1
else
	if [ $REF_SUBPROJECT != "no" ]
	then
		if [ $DRY == "no" ] && [ ! -z "$(grep "DRY yes" $REF_SUBPROJECT/config/env.txt)" ]
		then
			rm -r $SUBPROJECT
			if [ ! "$(ls -A)" ] ; then cd .. && rmdir $PROJECT ; fi
			echo "# Previous subproject $REF_SUBPROJECT was a DRY RUN only." >&2
			error_doc "# Remove $REF_SUBPROJECT from $OUT_PATH/$PROJECT or provide another output directory in the configuration file." 1
			exit 1
		fi
	fi
	cd $EXEC_PATH
	mkdir $SUBPROJECT
	cd $SUBPROJECT
	mkdir config log
	for i in $OUT/config/*; do dd if=$i of=$EXEC/config/${i##*/} bs=1M > log/deltamp.log 2>&1 ; done
	if [ $REF_SUBPROJECT == "no" ]
	then
		mkdir archives archives/$SUBPROJECT.outputs archives/$SUBPROJECT.processing processing libraries quality_check
		cp config/configuration.$SUBPROJECT.tsv archives/$SUBPROJECT.outputs
	fi
	paste <(date +%F -d @$START_TIME) <(date +%T -d @$START_TIME) <(echo -e "${VERSION[DELTAMP]}\t$USER\t$INIT_DIR\t$ARGUMENTS\t$SUBPROJECT") >> ${DELTAMP_BUILD%/*}/history
	echo "###"
	echo "execution of deltamp version ${VERSION[DELTAMP]} for the SUBPROJECT $SUBPROJECT"
	echo "###"
	bash config/steps.final 2> log/deltamp.log
fi
